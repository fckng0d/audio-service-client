{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\nfunction requestTimeout(callback, delay) {\n  var start = now();\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n  return size;\n}\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n  return cachedRTLResult;\n}\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n    data = _ref.data,\n    rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\nfunction createGridComponent(_ref2) {\n  var _class;\n  var getColumnOffset = _ref2.getColumnOffset,\n    getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n    getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n    getColumnWidth = _ref2.getColumnWidth,\n    getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n    getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n    getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n    getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n    getRowHeight = _ref2.getRowHeight,\n    getRowOffset = _ref2.getRowOffset,\n    getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n    getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n    initInstanceProps = _ref2.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref2.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function Grid(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n          columnWidth = _this$props.columnWidth,\n          direction = _this$props.direction,\n          rowHeight = _this$props.rowHeight;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientHeight = _event$currentTarget.clientHeight,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollTop = _event$currentTarget.scrollTop,\n          scrollHeight = _event$currentTarget.scrollHeight,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n      return _this;\n    }\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = Grid.prototype;\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n        scrollTop = _ref3.scrollTop;\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n        align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n        columnIndex = _ref4.columnIndex,\n        rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n        columnCount = _this$props2.columnCount,\n        height = _this$props2.height,\n        rowCount = _this$props2.rowCount,\n        width = _this$props2.width;\n      var _this$state = this.state,\n        scrollLeft = _this$state.scrollLeft,\n        scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n        initialScrollLeft = _this$props3.initialScrollLeft,\n        initialScrollTop = _this$props3.initialScrollTop;\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n        scrollLeft = _this$state2.scrollLeft,\n        scrollTop = _this$state2.scrollTop,\n        scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              var clientWidth = outerRef.clientWidth,\n                scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        columnCount = _this$props4.columnCount,\n        direction = _this$props4.direction,\n        height = _this$props4.height,\n        innerRef = _this$props4.innerRef,\n        innerElementType = _this$props4.innerElementType,\n        innerTagName = _this$props4.innerTagName,\n        itemData = _this$props4.itemData,\n        _this$props4$itemKey = _this$props4.itemKey,\n        itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n        outerElementType = _this$props4.outerElementType,\n        outerTagName = _this$props4.outerTagName,\n        rowCount = _this$props4.rowCount,\n        style = _this$props4.style,\n        useIsScrolling = _this$props4.useIsScrolling,\n        width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n        columnStartIndex = _this$_getHorizontalR[0],\n        columnStopIndex = _this$_getHorizontalR[1];\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n        rowStartIndex = _this$_getVerticalRan[0],\n        rowStopIndex = _this$_getVerticalRan[1];\n      var items = [];\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n        columnCount = _this$props5.columnCount,\n        onItemsRendered = _this$props5.onItemsRendered,\n        onScroll = _this$props5.onScroll,\n        rowCount = _this$props5.rowCount;\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n            _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n            _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n            _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n            _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n            _overscanRowStartIndex = _this$_getVerticalRan2[0],\n            _overscanRowStopIndex = _this$_getVerticalRan2[1],\n            _visibleRowStartIndex = _this$_getVerticalRan2[2],\n            _visibleRowStopIndex = _this$_getVerticalRan2[3];\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n          _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n          _scrollLeft = _this$state3.scrollLeft,\n          _scrollTop = _this$state3.scrollTop,\n          _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n          _verticalScrollDirection = _this$state3.verticalScrollDirection;\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n        columnCount = _this$props6.columnCount,\n        overscanColumnCount = _this$props6.overscanColumnCount,\n        overscanColumnsCount = _this$props6.overscanColumnsCount,\n        overscanCount = _this$props6.overscanCount,\n        rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n        horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n        isScrolling = _this$state4.isScrolling,\n        scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n        columnCount = _this$props7.columnCount,\n        overscanCount = _this$props7.overscanCount,\n        overscanRowCount = _this$props7.overscanRowCount,\n        overscanRowsCount = _this$props7.overscanRowsCount,\n        rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n        isScrolling = _this$state5.isScrolling,\n        verticalScrollDirection = _this$state5.verticalScrollDirection,\n        scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _class;\n}\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n    direction = _ref5.direction,\n    height = _ref5.height,\n    innerTagName = _ref5.innerTagName,\n    outerTagName = _ref5.outerTagName,\n    overscanColumnsCount = _ref5.overscanColumnsCount,\n    overscanCount = _ref5.overscanCount,\n    overscanRowsCount = _ref5.overscanRowsCount,\n    width = _ref5.width;\n  var instance = _ref6.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n    estimatedRowHeight = _ref2.estimatedRowHeight,\n    lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n    estimatedColumnWidth = _ref4.estimatedColumnWidth,\n    lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n      width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n      height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n      estimatedColumnWidth = _ref5.estimatedColumnWidth,\n      estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n        rowIndex = _ref6.rowIndex,\n        _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n        shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n      rowHeight = _ref7.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\nfunction createListComponent(_ref) {\n  var _class;\n  var getItemOffset = _ref.getItemOffset,\n    getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n    getItemSize = _ref.getItemSize,\n    getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n    getStartIndexForOffset = _ref.getStartIndexForOffset,\n    getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n    initInstanceProps = _ref.initInstanceProps,\n    shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n    validateProps = _ref.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent);\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    function List(props) {\n      var _this;\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n          direction = _this$props.direction,\n          itemSize = _this$props.itemSize,\n          layout = _this$props.layout;\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n        var style;\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n        return style;\n      };\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n          clientWidth = _event$currentTarget.clientWidth,\n          scrollLeft = _event$currentTarget.scrollLeft,\n          scrollWidth = _event$currentTarget.scrollWidth;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n          clientHeight = _event$currentTarget2.clientHeight,\n          scrollHeight = _event$currentTarget2.scrollHeight,\n          scrollTop = _event$currentTarget2.scrollTop;\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n      return _this;\n    }\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n    var _proto = List.prototype;\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n      var _this$props2 = this.props,\n        itemCount = _this$props2.itemCount,\n        layout = _this$props2.layout;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1)); // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n\n      var scrollbarSize = 0;\n      if (this._outerRef) {\n        var outerRef = this._outerRef;\n        if (layout === 'vertical') {\n          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;\n        } else {\n          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;\n        }\n      }\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));\n    };\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n        direction = _this$props3.direction,\n        initialScrollOffset = _this$props3.initialScrollOffset,\n        layout = _this$props3.layout;\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props4 = this.props,\n        direction = _this$props4.direction,\n        layout = _this$props4.layout;\n      var _this$state = this.state,\n        scrollOffset = _this$state.scrollOffset,\n        scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n      this._callPropsCallbacks();\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n    _proto.render = function render() {\n      var _this$props5 = this.props,\n        children = _this$props5.children,\n        className = _this$props5.className,\n        direction = _this$props5.direction,\n        height = _this$props5.height,\n        innerRef = _this$props5.innerRef,\n        innerElementType = _this$props5.innerElementType,\n        innerTagName = _this$props5.innerTagName,\n        itemCount = _this$props5.itemCount,\n        itemData = _this$props5.itemData,\n        _this$props5$itemKey = _this$props5.itemKey,\n        itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey,\n        layout = _this$props5.layout,\n        outerElementType = _this$props5.outerElementType,\n        outerTagName = _this$props5.outerTagName,\n        style = _this$props5.style,\n        useIsScrolling = _this$props5.useIsScrolling,\n        width = _this$props5.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n      var _this$_getRangeToRend = this._getRangeToRender(),\n        startIndex = _this$_getRangeToRend[0],\n        stopIndex = _this$_getRangeToRend[1];\n      var items = [];\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n            _overscanStartIndex = _this$_getRangeToRend2[0],\n            _overscanStopIndex = _this$_getRangeToRend2[1],\n            _visibleStartIndex = _this$_getRangeToRend2[2],\n            _visibleStopIndex = _this$_getRangeToRend2[3];\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n          _scrollDirection = _this$state2.scrollDirection,\n          _scrollOffset = _this$state2.scrollOffset,\n          _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props6 = this.props,\n        itemCount = _this$props6.itemCount,\n        overscanCount = _this$props6.overscanCount;\n      var _this$state3 = this.state,\n        isScrolling = _this$state3.isScrolling,\n        scrollDirection = _this$state3.scrollDirection,\n        scrollOffset = _this$state3.scrollOffset;\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n    direction = _ref2.direction,\n    height = _ref2.height,\n    layout = _ref2.layout,\n    innerTagName = _ref2.innerTagName,\n    outerTagName = _ref2.outerTagName,\n    width = _ref2.width;\n  var instance = _ref3.instance;\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n    itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n    instanceProps.lastMeasuredIndex = index;\n  }\n  return itemMetadataMap[index];\n};\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n    lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n    estimatedItemSize = _ref3.estimatedItemSize,\n    lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = props.direction,\n      height = props.height,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size + scrollbarSize);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n      height = props.height,\n      itemCount = props.itemCount,\n      layout = props.layout,\n      width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n      estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n      rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n      columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n      columnWidth = _ref7.columnWidth,\n      width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n      height = _ref8.height,\n      rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n      columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n      columnCount = _ref10.columnCount,\n      width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n      rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n      rowCount = _ref12.rowCount,\n      height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n      rowHeight = _ref13.rowHeight;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n      itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = _ref4.direction,\n      height = _ref4.height,\n      itemCount = _ref4.itemCount,\n      itemSize = _ref4.itemSize,\n      layout = _ref4.layout,\n      width = _ref4.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize + scrollbarSize);\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n      itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n      height = _ref6.height,\n      itemCount = _ref6.itemCount,\n      itemSize = _ref6.itemSize,\n      layout = _ref6.layout,\n      width = _ref6.width;\n    // TODO Deprecate direction \"horizontal\"\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\nvar _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n    prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);\n  var nextStyle = nextProps.style,\n    nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n}\n\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\nexport { FixedSizeGrid, FixedSizeList, VariableSizeGrid, VariableSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"names":["hasNativePerformanceNow","performance","now","Date","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","tick","call","requestAnimationFrame","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","_ref","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","env","NODE_ENV","window","WeakSet","createGridComponent","_ref2","_class","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_PureComponent","_inheritsLoose","Grid","props","_this","_instanceProps","_assertThisInitialized","_resetIsScrollingTimeoutId","_outerRef","state","instance","isScrolling","horizontalScrollDirection","initialScrollLeft","scrollTop","initialScrollTop","scrollUpdateWasRequested","verticalScrollDirection","_callOnItemsRendered","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","_this$props","columnWidth","rowHeight","itemStyleCache","_getItemStyleCache","key","hasOwnProperty","_offset","isRtl","position","left","undefined","right","top","_","__","___","_onScroll","event","_event$currentTarget","currentTarget","clientHeight","scrollHeight","scrollWidth","setState","prevState","calculatedScrollLeft","Math","max","min","calculatedScrollTop","_resetIsScrollingDebounced","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","_proto","prototype","scrollTo","_ref3","scrollToItem","_ref4","_ref4$align","align","_this$props2","columnCount","rowCount","_this$state","scrollbarSize","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","_this$props3","_callPropsCallbacks","componentDidUpdate","_this$state2","componentWillUnmount","render","_this$props4","children","className","innerRef","innerElementType","innerTagName","itemData","_this$props4$itemKey","itemKey","outerElementType","outerTagName","useIsScrolling","_this$_getHorizontalR","_getHorizontalRangeToRender","columnStartIndex","columnStopIndex","_this$_getVerticalRan","_getVerticalRangeToRender","rowStartIndex","rowStopIndex","items","_rowIndex","_columnIndex","push","_extends","WebkitOverflowScrolling","willChange","pointerEvents","_this$props5","_this$_getHorizontalR2","_overscanColumnStartIndex","_overscanColumnStopIndex","_visibleColumnStartIndex","_visibleColumnStopIndex","_this$_getVerticalRan2","_overscanRowStartIndex","_overscanRowStopIndex","_visibleRowStartIndex","_visibleRowStopIndex","_this$state3","_horizontalScrollDirection","_scrollLeft","_scrollTop","_scrollUpdateWasRequested","_verticalScrollDirection","_this$props6","overscanColumnCount","overscanColumnsCount","overscanCount","_this$state4","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","_this$props7","overscanRowCount","overscanRowsCount","_this$state5","PureComponent","defaultProps","_ref5","_ref6","has","add","console","warn","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","offset","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","index","instanceProps","itemMetadataMap","itemSize","lastMeasuredIndex","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","high","low","middle","floor","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","scrollOffset","estimatedTotalSize","maxOffset","minOffset","round","VariableSizeGrid","resetAfterColumnIndex","shouldForceUpdate","resetAfterIndices","resetAfterRowIndex","_ref6$shouldForceUpda","forceUpdate","_ref7","IS_SCROLLING_DEBOUNCE_INTERVAL$1","defaultItemKey$1","devWarningsDirection","devWarningsTagName$1","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","List","scrollDirection","initialScrollOffset","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","layout","isHorizontal","offsetHorizontal","_onScrollHorizontal","_onScrollVertical","_event$currentTarget2","validateSharedProps$1","_this$props5$itemKey","_this$_getRangeToRend","_getRangeToRender","_index","_this$_getRangeToRend2","_overscanStartIndex","_overscanStopIndex","_visibleStartIndex","_visibleStopIndex","_scrollDirection","_scrollOffset","DEFAULT_ESTIMATED_ITEM_SIZE$1","getItemMetadata$1","findNearestItem$1","findNearestItemBinarySearch$1","findNearestItemExponentialSearch$1","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","resetAfterIndex","FixedSizeGrid","lastColumnOffset","middleOffset","ceil","_ref8","lastRowOffset","_ref9","_ref10","numVisibleColumns","_ref11","_ref12","numVisibleRows","_ref13","FixedSizeList","lastItemOffset","numVisibleItems","shallowDiffers","prev","next","attribute","_attribute","areEqual","prevProps","prevStyle","prevRest","_objectWithoutPropertiesLoose","_excluded","nextStyle","nextRest","_excluded2","shouldComponentUpdate","nextState"],"sources":["D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\timer.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\domHelpers.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\createGridComponent.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\VariableSizeGrid.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\createListComponent.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\VariableSizeList.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\FixedSizeGrid.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\FixedSizeList.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\shallowDiffers.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\areEqual.js","D:\\Файлы\\ВятГУ\\2 курс\\Семестр 4\\Web\\курсач\\audio-service\\audio-service-client\\node_modules\\react-window\\src\\shouldComponentUpdate.js"],"sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size + scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\ntype InstanceProps = any;\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) -\n        size +\n        ((itemSize: any): number) +\n        scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}