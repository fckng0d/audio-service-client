{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\audioControls\\\\AudioControls.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useAudioContext } from \"../AudioContext\";\nimport \"./AudioControls.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioControls = () => {\n  _s();\n  const {\n    isPlaying,\n    togglePlay,\n    volume,\n    audioRef,\n    setVolume,\n    debouncedPlayNextTrack,\n    debouncedPlayPreviousTrack,\n    audioFiles\n  } = useAudioContext();\n  const [currentTime, setCurrentTime] = useState(0);\n  const prevAudioUrl = useRef(null);\n  useEffect(() => {\n    const updateTime = () => {\n      setCurrentTime(audioRef.current.currentTime);\n    };\n    const interval = setInterval(updateTime, 100); // Обновляем текущее время каждые 100 миллисекунд\n\n    return () => clearInterval(interval);\n  }, [audioRef]);\n  const handleTogglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    togglePlay();\n  };\n  useEffect(() => {\n    audioRef.current.volume = volume;\n  }, [volume]);\n  function formatDuration(duration) {\n    const hours = Math.floor(duration / 3600);\n    const minutes = Math.floor(duration % 3600 / 60);\n    const seconds = Math.floor(duration % 60);\n    let formattedTime = \"\";\n    if (hours > 0) {\n      formattedTime += hours + \":\";\n    }\n    if (hours > 0 && minutes < 10) {\n      formattedTime += \"0\";\n    }\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\n    formattedTime += String(seconds).padStart(2, \"0\");\n    return formattedTime;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-controls\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timeline-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-time\",\n          children: formatDuration(currentTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"customAudioPlayer\",\n          ref: audioRef,\n          controls: true,\n          autoPlay: isPlaying,\n          type: \"audio/mpeg\",\n          children: \"Your browser does not support the audio element.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duration\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: formatDuration(audioRef.current.duration)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioControls, \"Gjn9v4RKY4Y8dn6hji6Gzet8Swg=\", false, function () {\n  return [useAudioContext];\n});\n_c = AudioControls;\nexport default AudioControls;\nvar _c;\n$RefreshReg$(_c, \"AudioControls\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useAudioContext","jsxDEV","_jsxDEV","AudioControls","_s","isPlaying","togglePlay","volume","audioRef","setVolume","debouncedPlayNextTrack","debouncedPlayPreviousTrack","audioFiles","currentTime","setCurrentTime","prevAudioUrl","updateTime","current","interval","setInterval","clearInterval","handleTogglePlay","pause","play","formatDuration","duration","hours","Math","floor","minutes","seconds","formattedTime","String","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","controls","autoPlay","type","_c","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/audioControls/AudioControls.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useAudioContext } from \"../AudioContext\";\r\nimport \"./AudioControls.css\";\r\n\r\nconst AudioControls = () => {\r\n  const {\r\n    isPlaying,\r\n    togglePlay,\r\n    volume,\r\n    audioRef,\r\n    setVolume,\r\n    debouncedPlayNextTrack,\r\n    debouncedPlayPreviousTrack,\r\n    audioFiles,\r\n  } = useAudioContext();\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n\r\n  const prevAudioUrl = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const updateTime = () => {\r\n      setCurrentTime(audioRef.current.currentTime);\r\n    };\r\n\r\n    const interval = setInterval(updateTime, 100); // Обновляем текущее время каждые 100 миллисекунд\r\n\r\n    return () => clearInterval(interval);\r\n  }, [audioRef]);\r\n\r\n  const handleTogglePlay = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.play();\r\n    }\r\n    togglePlay();\r\n  };\r\n\r\n  useEffect(() => {\r\n    audioRef.current.volume = volume;\r\n  }, [volume]);\r\n\r\n  function formatDuration(duration) {\r\n    const hours = Math.floor(duration / 3600);\r\n    const minutes = Math.floor((duration % 3600) / 60);\r\n    const seconds = Math.floor(duration % 60);\r\n\r\n    let formattedTime = \"\";\r\n    if (hours > 0) {\r\n      formattedTime += hours + \":\";\r\n    }\r\n    if (hours > 0 && minutes < 10) {\r\n      formattedTime += \"0\";\r\n    }\r\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\r\n    formattedTime += String(seconds).padStart(2, \"0\");\r\n\r\n    return formattedTime;\r\n  }\r\n\r\n  return (\r\n    <div className=\"audio-controls\">\r\n      <div className=\"custom-controls\">\r\n        {/* Остальные элементы контроля */}\r\n        <div className=\"timeline-container\">\r\n          {/* Кастомный блок текущего времени */}\r\n          <div className=\"current-time\">\r\n            {formatDuration(currentTime)}\r\n          </div>\r\n          <audio\r\n            id=\"customAudioPlayer\"\r\n            ref={audioRef}\r\n            controls\r\n            autoPlay={isPlaying}\r\n            type=\"audio/mpeg\"\r\n          >\r\n            Your browser does not support the audio element.\r\n          </audio>\r\n          {/* Элемент времени проигрывания */}\r\n          <div className=\"duration\">\r\n            <span>{formatDuration(audioRef.current.duration)}</span>\r\n          </div>\r\n        </div>\r\n        {/* Остальные элементы контроля */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioControls;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}