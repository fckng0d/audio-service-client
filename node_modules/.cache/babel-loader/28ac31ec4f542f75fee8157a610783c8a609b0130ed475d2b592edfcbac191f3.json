{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\AudioContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioContext = /*#__PURE__*/createContext();\nexport const useAudioContext = () => {\n  _s();\n  return useContext(AudioContext);\n};\n_s(useAudioContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AudioProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);\n  const audioRef = useRef(null);\n  const playNextTrack = () => {\n    setCurrentTrackIndex(prevIndex => (prevIndex + 1) % audioFiles.length);\n  };\n  const playPreviousTrack = () => {\n    setCurrentTrackIndex(prevIndex => (prevIndex - 1 + audioFiles.length) % audioFiles.length);\n  };\n  return /*#__PURE__*/_jsxDEV(AudioContext.Provider, {\n    value: {\n      currentTrack,\n      setCurrentTrack: (track, index) => {\n        setCurrentTrack(track);\n        setCurrentTrackIndex(index);\n      },\n      isPlaying,\n      setIsPlaying,\n      volume,\n      setVolume,\n      audioFiles,\n      setAudioFiles,\n      currentTrackIndex,\n      setCurrentTrackIndex,\n      audioRef,\n      playNextTrack,\n      playPreviousTrack\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s2(AudioProvider, \"xWEu0jJAHciTrWzHIOZgD9DQU18=\");\n_c = AudioProvider;\nAudioProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"AudioProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useRef","PropTypes","jsxDEV","_jsxDEV","AudioContext","useAudioContext","_s","AudioProvider","children","_s2","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","volume","setVolume","audioFiles","setAudioFiles","currentTrackIndex","setCurrentTrackIndex","audioRef","playNextTrack","prevIndex","length","playPreviousTrack","Provider","value","track","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/AudioContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AudioContext = createContext();\r\n\r\nexport const useAudioContext = () => useContext(AudioContext);\r\n\r\nexport const AudioProvider = ({ children }) => {\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [volume, setVolume] = useState(1);\r\n  const [audioFiles, setAudioFiles] = useState([]);\r\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);\r\n  const audioRef = useRef(null);\r\n\r\n  const playNextTrack = () => {\r\n    setCurrentTrackIndex(prevIndex => (prevIndex + 1) % audioFiles.length);\r\n  };\r\n\r\n  const playPreviousTrack = () => {\r\n    setCurrentTrackIndex(prevIndex => (prevIndex - 1 + audioFiles.length) % audioFiles.length);\r\n  };\r\n\r\n  return (\r\n    <AudioContext.Provider\r\n      value={{\r\n        currentTrack,\r\n        setCurrentTrack: (track, index) => {\r\n          setCurrentTrack(track);\r\n          setCurrentTrackIndex(index);\r\n        },\r\n        isPlaying,\r\n        setIsPlaying,\r\n        volume,\r\n        setVolume,\r\n        audioFiles,\r\n        setAudioFiles,\r\n        currentTrackIndex,\r\n        setCurrentTrackIndex,\r\n        audioRef,\r\n        playNextTrack,\r\n        playPreviousTrack,\r\n      }}\r\n    >\r\n      {children}\r\n    </AudioContext.Provider>\r\n  );\r\n};\r\n\r\nAudioProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAC1E,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,YAAY,gBAAGP,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMQ,eAAe,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,YAAY,CAAC;AAAA;AAACE,EAAA,CAAjDD,eAAe;AAE5B,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAMsB,QAAQ,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMqB,aAAa,GAAGA,CAAA,KAAM;IAC1BF,oBAAoB,CAACG,SAAS,IAAI,CAACA,SAAS,GAAG,CAAC,IAAIN,UAAU,CAACO,MAAM,CAAC;EACxE,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BL,oBAAoB,CAACG,SAAS,IAAI,CAACA,SAAS,GAAG,CAAC,GAAGN,UAAU,CAACO,MAAM,IAAIP,UAAU,CAACO,MAAM,CAAC;EAC5F,CAAC;EAED,oBACEpB,OAAA,CAACC,YAAY,CAACqB,QAAQ;IACpBC,KAAK,EAAE;MACLhB,YAAY;MACZC,eAAe,EAAEA,CAACgB,KAAK,EAAEC,KAAK,KAAK;QACjCjB,eAAe,CAACgB,KAAK,CAAC;QACtBR,oBAAoB,CAACS,KAAK,CAAC;MAC7B,CAAC;MACDhB,SAAS;MACTC,YAAY;MACZC,MAAM;MACNC,SAAS;MACTC,UAAU;MACVC,aAAa;MACbC,iBAAiB;MACjBC,oBAAoB;MACpBC,QAAQ;MACRC,aAAa;MACbG;IACF,CAAE;IAAAhB,QAAA,EAEDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACvB,GAAA,CAxCWF,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AA0C1BA,aAAa,CAAC2B,SAAS,GAAG;EACxB1B,QAAQ,EAAEP,SAAS,CAACkC,IAAI,CAACC;AAC3B,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}