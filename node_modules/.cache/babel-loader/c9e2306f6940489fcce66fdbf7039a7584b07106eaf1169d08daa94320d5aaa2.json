{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\AudioContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { debounce } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioContext = /*#__PURE__*/createContext();\nexport const useAudioContext = () => {\n  _s();\n  return useContext(AudioContext);\n};\n_s(useAudioContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AudioProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);\n  const [currentTime, setCurrentTime] = useState(0); // Добавляем currentTime\n  const audioRef = useRef(null);\n  const [currentPlaylistId, setCurrentPlaylistId] = useState(-1);\n  const [playlistId, setPlaylistId] = useState(-1);\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [localAudioFiles, setLocalAudioFiles] = useState([]);\n  const clearAudioFiles = () => {\n    setAudioFiles([]);\n  };\n  const updateAudioFiles = data => {\n    if (currentPlaylistId !== playlistId || !isPlaying) {\n      setAudioFiles(data);\n      if (!isPlaying) {\n        setLocalAudioFiles(data);\n      }\n    }\n  };\n  const updatePlaylist = data => {\n    if (currentPlaylistId !== playlistId || !isPlaying) {\n      setLocalAudioFiles(data);\n      if (!isPlaying) {\n        setAudioFiles(data);\n      }\n    }\n  };\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n  useEffect(() => {\n    if (currentTrackIndex !== -1 && currentPlaylistId === playlistId) {\n      setCurrentTrack({\n        id: audioFiles[currentTrackIndex].id,\n        audioUrl: audioFiles[currentTrackIndex].audioUrl,\n        trackName: audioFiles[currentTrackIndex].title,\n        author: audioFiles[currentTrackIndex].author,\n        imageUrl: audioFiles[currentTrackIndex].image ? `data:image/jpeg;base64,${audioFiles[currentTrackIndex].image.data}` : \"\",\n        duration: audioFiles[currentTrackIndex].duration\n      });\n    }\n  }, [audioFiles, currentTrackIndex, playlistId, currentPlaylistId]);\n  const playNextTrack = async () => {\n    if (currentTrackIndex === localAudioFiles.length - 1) return;\n    const nextIndex = currentTrackIndex + 1;\n    setCurrentTrackIndex(nextIndex);\n    try {\n      const response = await fetch(`http://localhost:8080/api/audio/${localAudioFiles[nextIndex].id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n      const audioData = URL.createObjectURL(blob);\n      setCurrentTrack({\n        id: localAudioFiles[nextIndex].id,\n        audioUrl: audioData,\n        trackName: localAudioFiles[nextIndex].title,\n        author: localAudioFiles[nextIndex].author,\n        imageUrl: localAudioFiles[nextIndex].image ? `data:image/jpeg;base64,${localAudioFiles[nextIndex].image.data}` : \"\",\n        duration: localAudioFiles[nextIndex].duration\n      });\n      setIsPlaying(true); // Начать воспроизведение нового трека\n    } catch (error) {\n      console.error(\"Error fetching audio:\", error);\n    }\n  };\n  const playPreviousTrack = async () => {\n    if (currentTrackIndex === 0) return;\n    const previousIndex = currentTrackIndex - 1;\n    setCurrentTrackIndex(previousIndex);\n    try {\n      const response = await fetch(`http://localhost:8080/api/audio/${localAudioFiles[previousIndex].id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const blob = await response.blob();\n      const audioData = URL.createObjectURL(blob);\n      setCurrentTrack({\n        id: localAudioFiles[previousIndex].id,\n        audioUrl: audioData,\n        trackName: localAudioFiles[previousIndex].title,\n        author: localAudioFiles[previousIndex].author,\n        imageUrl: localAudioFiles[previousIndex].image ? `data:image/jpeg;base64,${localAudioFiles[previousIndex].image.data}` : \"\",\n        duration: localAudioFiles[previousIndex].duration\n      });\n      setIsPlaying(true); // Начать воспроизведение нового трека\n    } catch (error) {\n      console.error(\"Error fetching audio:\", error);\n    }\n  };\n\n  // Задержка перед следующим вызовом\n  const debouncedPlayNextTrack = debounce(() => {\n    if (currentTrackIndex !== -1) {\n      playNextTrack();\n    }\n  }, 500);\n  const debouncedPlayPreviousTrack = debounce(() => {\n    if (currentTrackIndex !== -1) {\n      playPreviousTrack();\n    }\n  }, 500);\n  useEffect(() => {\n    if (currentTrackIndex !== -1 && currentPlaylistId === playlistId) {\n      const fetchAudioAndPlay = async () => {\n        try {\n          const response = await fetch(`http://localhost:8080/api/audio/${audioFiles[currentTrackIndex].id}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const blob = await response.blob();\n          const audioData = URL.createObjectURL(new Blob([blob]));\n          setCurrentTrack({\n            id: audioFiles[currentTrackIndex].id,\n            audioUrl: audioData,\n            trackName: audioFiles[currentTrackIndex].title,\n            author: audioFiles[currentTrackIndex].author,\n            imageUrl: audioFiles[currentTrackIndex].image ? `data:image/jpeg;base64,${audioFiles[currentTrackIndex].image.data}` : \"\",\n            duration: audioFiles[currentTrackIndex].duration\n          });\n          setIsPlaying(true);\n        } catch (error) {\n          console.error(\"Error fetching audio:\", error);\n        }\n      };\n      fetchAudioAndPlay();\n      audioRef.current.volume = volume;\n    }\n  }, [audioFiles, currentTrackIndex]);\n  return /*#__PURE__*/_jsxDEV(AudioContext.Provider, {\n    value: {\n      currentTrack,\n      setCurrentTrack,\n      isPlaying,\n      setIsPlaying,\n      togglePlay,\n      volume,\n      setVolume,\n      audioFiles,\n      updateAudioFiles,\n      currentTrackIndex,\n      setCurrentTrackIndex,\n      audioRef,\n      debouncedPlayNextTrack,\n      debouncedPlayPreviousTrack,\n      currentTime,\n      setCurrentTime,\n      clearAudioFiles,\n      currentPlaylistId,\n      setCurrentPlaylistId,\n      playlistId,\n      setPlaylistId,\n      localAudioFiles,\n      setLocalAudioFiles,\n      updatePlaylist\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s2(AudioProvider, \"ZD/pVXYSTNsQGDiazHVbcRFa+0I=\");\n_c = AudioProvider;\nAudioProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"AudioProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useRef","PropTypes","debounce","jsxDEV","_jsxDEV","AudioContext","useAudioContext","_s","AudioProvider","children","_s2","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","volume","setVolume","currentTrackIndex","setCurrentTrackIndex","currentTime","setCurrentTime","audioRef","currentPlaylistId","setCurrentPlaylistId","playlistId","setPlaylistId","audioFiles","setAudioFiles","localAudioFiles","setLocalAudioFiles","clearAudioFiles","updateAudioFiles","data","updatePlaylist","togglePlay","id","audioUrl","trackName","title","author","imageUrl","image","duration","playNextTrack","length","nextIndex","response","fetch","ok","Error","status","blob","audioData","URL","createObjectURL","error","console","playPreviousTrack","previousIndex","debouncedPlayNextTrack","debouncedPlayPreviousTrack","fetchAudioAndPlay","Blob","current","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/AudioContext.js"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useState,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { debounce } from \"lodash\";\r\n\r\nconst AudioContext = createContext();\r\n\r\nexport const useAudioContext = () => useContext(AudioContext);\r\n\r\nexport const AudioProvider = ({ children }) => {\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [volume, setVolume] = useState(1);\r\n  \r\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);\r\n  const [currentTime, setCurrentTime] = useState(0); // Добавляем currentTime\r\n  const audioRef = useRef(null);\r\n\r\n  const [currentPlaylistId, setCurrentPlaylistId] = useState(-1);\r\n  const [playlistId, setPlaylistId] = useState(-1);\r\n\r\n  const [audioFiles, setAudioFiles] = useState([]);\r\n  const [localAudioFiles, setLocalAudioFiles] = useState([]);\r\n\r\n  const clearAudioFiles = () => {\r\n    setAudioFiles([]);\r\n  };\r\n\r\n  const updateAudioFiles = (data) => {\r\n    if (currentPlaylistId !== playlistId || !isPlaying) {\r\n      setAudioFiles(data);\r\n      if (!isPlaying) {\r\n        setLocalAudioFiles(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updatePlaylist = (data) => {\r\n    if (currentPlaylistId !== playlistId || !isPlaying) {\r\n      setLocalAudioFiles(data);\r\n      if (!isPlaying) {\r\n        setAudioFiles(data);\r\n      }\r\n    }\r\n  };\r\n\r\n  const togglePlay = () => {\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentTrackIndex !== -1 && currentPlaylistId === playlistId) {\r\n      setCurrentTrack({\r\n        id: audioFiles[currentTrackIndex].id,\r\n        audioUrl: audioFiles[currentTrackIndex].audioUrl,\r\n        trackName: audioFiles[currentTrackIndex].title,\r\n        author: audioFiles[currentTrackIndex].author,\r\n        imageUrl: audioFiles[currentTrackIndex].image\r\n          ? `data:image/jpeg;base64,${audioFiles[currentTrackIndex].image.data}`\r\n          : \"\",\r\n        duration: audioFiles[currentTrackIndex].duration,\r\n      });\r\n    }\r\n  }, [audioFiles, currentTrackIndex, playlistId, currentPlaylistId]);\r\n\r\n  const playNextTrack = async () => {\r\n    if (currentTrackIndex === localAudioFiles.length - 1) return;\r\n    const nextIndex = currentTrackIndex + 1;\r\n    setCurrentTrackIndex(nextIndex);\r\n  \r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/audio/${localAudioFiles[nextIndex].id}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const blob = await response.blob();\r\n      const audioData = URL.createObjectURL(blob);\r\n  \r\n      setCurrentTrack({\r\n        id: localAudioFiles[nextIndex].id,\r\n        audioUrl: audioData,\r\n        trackName: localAudioFiles[nextIndex].title,\r\n        author: localAudioFiles[nextIndex].author,\r\n        imageUrl: localAudioFiles[nextIndex].image\r\n          ? `data:image/jpeg;base64,${localAudioFiles[nextIndex].image.data}`\r\n          : \"\",\r\n        duration: localAudioFiles[nextIndex].duration,\r\n      });\r\n      setIsPlaying(true); // Начать воспроизведение нового трека\r\n    } catch (error) {\r\n      console.error(\"Error fetching audio:\", error);\r\n    }\r\n  };\r\n  \r\n  const playPreviousTrack = async () => {\r\n    if (currentTrackIndex === 0) return;\r\n    const previousIndex = currentTrackIndex - 1;\r\n    setCurrentTrackIndex(previousIndex);\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/audio/${localAudioFiles[previousIndex].id}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const blob = await response.blob();\r\n      const audioData = URL.createObjectURL(blob);\r\n\r\n      setCurrentTrack({\r\n        id: localAudioFiles[previousIndex].id,\r\n        audioUrl: audioData,\r\n        trackName: localAudioFiles[previousIndex].title,\r\n        author: localAudioFiles[previousIndex].author,\r\n        imageUrl: localAudioFiles[previousIndex].image\r\n          ? `data:image/jpeg;base64,${localAudioFiles[previousIndex].image.data}`\r\n          : \"\",\r\n        duration: localAudioFiles[previousIndex].duration,\r\n      });\r\n      setIsPlaying(true); // Начать воспроизведение нового трека\r\n    } catch (error) {\r\n      console.error(\"Error fetching audio:\", error);\r\n    }\r\n  };\r\n\r\n  // Задержка перед следующим вызовом\r\n  const debouncedPlayNextTrack = debounce(() => {\r\n    if (currentTrackIndex !== -1) {\r\n      playNextTrack();\r\n    }\r\n  }, 500);\r\n\r\n  const debouncedPlayPreviousTrack = debounce(() => {\r\n    if (currentTrackIndex !== -1) {\r\n      playPreviousTrack();\r\n    }\r\n  }, 500);\r\n\r\n  useEffect(() => {\r\n    if (currentTrackIndex !== -1 && currentPlaylistId === playlistId) {\r\n      const fetchAudioAndPlay = async () => {\r\n        try {\r\n          const response = await fetch(\r\n            `http://localhost:8080/api/audio/${audioFiles[currentTrackIndex].id}`\r\n          );\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n          const blob = await response.blob();\r\n          const audioData = URL.createObjectURL(new Blob([blob]));\r\n\r\n          setCurrentTrack({\r\n            id: audioFiles[currentTrackIndex].id,\r\n            audioUrl: audioData,\r\n            trackName: audioFiles[currentTrackIndex].title,\r\n            author: audioFiles[currentTrackIndex].author,\r\n            imageUrl: audioFiles[currentTrackIndex].image\r\n              ? `data:image/jpeg;base64,${audioFiles[currentTrackIndex].image.data}`\r\n              : \"\",\r\n            duration: audioFiles[currentTrackIndex].duration,\r\n          });\r\n          setIsPlaying(true);\r\n        } catch (error) {\r\n          console.error(\"Error fetching audio:\", error);\r\n        }\r\n      };\r\n\r\n      fetchAudioAndPlay();\r\n      audioRef.current.volume = volume;\r\n    }\r\n  }, [audioFiles, currentTrackIndex]);\r\n\r\n  return (\r\n    <AudioContext.Provider\r\n      value={{\r\n        currentTrack,\r\n        setCurrentTrack,\r\n        isPlaying,\r\n        setIsPlaying,\r\n        togglePlay,\r\n        volume,\r\n        setVolume,\r\n        audioFiles,\r\n        updateAudioFiles,\r\n        currentTrackIndex,\r\n        setCurrentTrackIndex,\r\n        audioRef,\r\n        debouncedPlayNextTrack,\r\n        debouncedPlayPreviousTrack,\r\n        currentTime,\r\n        setCurrentTime,\r\n        clearAudioFiles,\r\n        currentPlaylistId,\r\n        setCurrentPlaylistId,\r\n        playlistId,\r\n        setPlaylistId,\r\n        localAudioFiles,\r\n        setLocalAudioFiles,\r\n        updatePlaylist,\r\n      }}\r\n    >\r\n      {children}\r\n    </AudioContext.Provider>\r\n  );\r\n};\r\n\r\nAudioProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}