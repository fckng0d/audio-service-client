{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\audioList\\\\AudioList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useAudioContext } from \"../AudioContext\";\nimport \"./AudioList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioList = () => {\n  _s();\n  const {\n    setCurrentTrack,\n    isPlaying,\n    togglePlay,\n    setIsPlaying,\n    currentTrackIndex,\n    setCurrentTrackIndex,\n    updateAudioFiles,\n    audioFiles,\n    audioRef\n  } = useAudioContext();\n  useEffect(() => {\n    if (currentTrackIndex === -1) {\n      fetch(\"http://localhost:8080/api/audio\", {\n        method: \"GET\"\n      }).then(response => response.json()).then(async data => {\n        // Загрузка данных аудиофайлов\n        await Promise.all(data.map(async audioFile => {\n          // Загрузка аудиофайла\n          const audioResponse = await fetch(`http://localhost:8080/api/audio/${audioFile.id}`);\n          if (!audioResponse.ok) {\n            throw new Error(`HTTP error! status: ${audioResponse.status}`);\n          }\n          const audioBlob = await audioResponse.blob();\n          const audioData = URL.createObjectURL(new Blob([audioBlob]));\n\n          // Загрузка изображения\n          const imageResponse = await fetch(`http://localhost:8080/api/audio/${audioFile.id}/image`);\n          if (!imageResponse.ok) {\n            throw new Error(`HTTP error! status: ${imageResponse.status}`);\n          }\n          const imageBlob = await imageResponse.blob();\n          const imageData = URL.createObjectURL(new Blob([imageBlob]));\n          return {\n            ...audioFile,\n            audioUrl: audioData,\n            imageUrl: imageData\n          };\n        }));\n        updateAudioFiles(data);\n      }).catch(error => console.error(\"Error fetching data:\", error));\n    }\n  }, [isPlaying]);\n  const handleTogglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause(); // Пауза воспроизведения\n    } else {\n      audioRef.current.play(); // Возобновление воспроизведения\n    }\n    togglePlay(); // Переключение состояния воспроизведения\n  };\n  const handlePlayAudio = async (audioFile, index) => {\n    console.log(index + \" : \" + currentTrackIndex);\n    if (currentTrackIndex === index) {\n      handleTogglePlay();\n    } else {\n      try {\n        const audioResponse = await fetch(`http://localhost:8080/api/audio/${audioFile.id}`);\n        if (!audioResponse.ok) {\n          throw new Error(`HTTP error! status: ${audioResponse.status}`);\n        }\n        const audioBlob = await audioResponse.blob();\n        const audioData = URL.createObjectURL(new Blob([audioBlob]));\n        const imageResponse = await fetch(`http://localhost:8080/api/audio/${audioFile.id}/image`);\n        if (!imageResponse.ok) {\n          throw new Error(`HTTP error! status: ${imageResponse.status}`);\n        }\n        const imageBlob = await imageResponse.blob();\n        const imageData = URL.createObjectURL(new Blob([imageBlob]));\n        setCurrentTrackIndex(index);\n        setCurrentTrack({\n          id: audioFile.id,\n          audioUrl: audioData,\n          trackName: audioFile.title,\n          author: audioFile.author,\n          imageUrl: imageData,\n          duration: audioFile.duration\n        });\n        setIsPlaying(true); // Устанавливаем флаг воспроизведения, чтобы воспроизвести трек\n      } catch (error) {\n        console.error(\"Error fetching audio:\", error);\n      }\n    }\n  };\n  function formatDuration(duration) {\n    const hours = Math.floor(duration / 3600);\n    const minutes = Math.floor(duration % 3600 / 60);\n    const seconds = Math.floor(duration % 60);\n    let formattedTime = \"\";\n    if (hours > 0) {\n      formattedTime += hours + \":\";\n    }\n    if (hours > 0 && minutes < 10) {\n      formattedTime += \"0\";\n    }\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\n    formattedTime += String(seconds).padStart(2, \"0\");\n    return formattedTime;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-list\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: audioFiles.map((audioFile, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"audio-metadata-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"play_pause\",\n              onClick: () => handlePlayAudio(audioFile, index),\n              children: currentTrackIndex === index && isPlaying ? \"||\" : \">\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-author-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"title\",\n              children: audioFile.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: audioFile.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"duration-container\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"duration\",\n              children: formatDuration(audioFile.duration)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)\n      }, audioFile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioList, \"EudjmabOemfR132jrAAmrt6anyo=\", false, function () {\n  return [useAudioContext];\n});\n_c = AudioList;\nexport default AudioList;\nvar _c;\n$RefreshReg$(_c, \"AudioList\");","map":{"version":3,"names":["React","useEffect","useAudioContext","jsxDEV","_jsxDEV","AudioList","_s","setCurrentTrack","isPlaying","togglePlay","setIsPlaying","currentTrackIndex","setCurrentTrackIndex","updateAudioFiles","audioFiles","audioRef","fetch","method","then","response","json","data","Promise","all","map","audioFile","audioResponse","id","ok","Error","status","audioBlob","blob","audioData","URL","createObjectURL","Blob","imageResponse","imageBlob","imageData","audioUrl","imageUrl","catch","error","console","handleTogglePlay","current","pause","play","handlePlayAudio","index","log","trackName","title","author","duration","formatDuration","hours","Math","floor","minutes","seconds","formattedTime","String","padStart","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/audioList/AudioList.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useAudioContext } from \"../AudioContext\";\r\nimport \"./AudioList.css\";\r\n\r\nconst AudioList = () => {\r\n  const {\r\n    setCurrentTrack,\r\n    isPlaying,\r\n    togglePlay,\r\n    setIsPlaying,\r\n    currentTrackIndex,\r\n    setCurrentTrackIndex,\r\n    updateAudioFiles,\r\n    audioFiles,\r\n    audioRef,\r\n  } = useAudioContext();\r\n\r\n  useEffect(() => {\r\n    if (currentTrackIndex === -1) {\r\n      fetch(\"http://localhost:8080/api/audio\", { method: \"GET\" })\r\n        .then((response) => response.json())\r\n        .then(async (data) => {\r\n          // Загрузка данных аудиофайлов\r\n          await Promise.all(\r\n            data.map(async (audioFile) => {\r\n              // Загрузка аудиофайла\r\n              const audioResponse = await fetch(\r\n                `http://localhost:8080/api/audio/${audioFile.id}`\r\n              );\r\n              if (!audioResponse.ok) {\r\n                throw new Error(\r\n                  `HTTP error! status: ${audioResponse.status}`\r\n                );\r\n              }\r\n              const audioBlob = await audioResponse.blob();\r\n              const audioData = URL.createObjectURL(new Blob([audioBlob]));\r\n  \r\n              // Загрузка изображения\r\n              const imageResponse = await fetch(\r\n                `http://localhost:8080/api/audio/${audioFile.id}/image`\r\n              );\r\n              if (!imageResponse.ok) {\r\n                throw new Error(\r\n                  `HTTP error! status: ${imageResponse.status}`\r\n                );\r\n              }\r\n              const imageBlob = await imageResponse.blob();\r\n              const imageData = URL.createObjectURL(new Blob([imageBlob]));\r\n  \r\n              return {\r\n                ...audioFile,\r\n                audioUrl: audioData,\r\n                imageUrl: imageData,\r\n              };\r\n            })\r\n          );\r\n          updateAudioFiles(data);\r\n        })\r\n        .catch((error) => console.error(\"Error fetching data:\", error));\r\n    }\r\n  }, [isPlaying]);\r\n  \r\n\r\n  const handleTogglePlay = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause(); // Пауза воспроизведения\r\n    } else {\r\n      audioRef.current.play(); // Возобновление воспроизведения\r\n    }\r\n    togglePlay(); // Переключение состояния воспроизведения\r\n  };\r\n\r\n  const handlePlayAudio = async (audioFile, index) => {\r\n    console.log(index + \" : \" + currentTrackIndex);\r\n    if (currentTrackIndex === index) {\r\n      handleTogglePlay();\r\n    } else {\r\n      try {\r\n        const audioResponse = await fetch(\r\n          `http://localhost:8080/api/audio/${audioFile.id}`\r\n        );\r\n        if (!audioResponse.ok) {\r\n          throw new Error(`HTTP error! status: ${audioResponse.status}`);\r\n        }\r\n        const audioBlob = await audioResponse.blob();\r\n        const audioData = URL.createObjectURL(new Blob([audioBlob]));\r\n  \r\n        const imageResponse = await fetch(\r\n          `http://localhost:8080/api/audio/${audioFile.id}/image`\r\n        );\r\n        if (!imageResponse.ok) {\r\n          throw new Error(`HTTP error! status: ${imageResponse.status}`);\r\n        }\r\n        const imageBlob = await imageResponse.blob();\r\n        const imageData = URL.createObjectURL(new Blob([imageBlob]));\r\n  \r\n        setCurrentTrackIndex(index);\r\n        setCurrentTrack({\r\n          id: audioFile.id,\r\n          audioUrl: audioData,\r\n          trackName: audioFile.title,\r\n          author: audioFile.author,\r\n          imageUrl: imageData,\r\n          duration: audioFile.duration,\r\n        });\r\n        setIsPlaying(true); // Устанавливаем флаг воспроизведения, чтобы воспроизвести трек\r\n      } catch (error) {\r\n        console.error(\"Error fetching audio:\", error);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  function formatDuration(duration) {\r\n    const hours = Math.floor(duration / 3600);\r\n    const minutes = Math.floor((duration % 3600) / 60);\r\n    const seconds = Math.floor(duration % 60);\r\n\r\n    let formattedTime = \"\";\r\n    if (hours > 0) {\r\n      formattedTime += hours + \":\";\r\n    }\r\n    if (hours > 0 && minutes < 10) {\r\n      formattedTime += \"0\";\r\n    }\r\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\r\n    formattedTime += String(seconds).padStart(2, \"0\");\r\n\r\n    return formattedTime;\r\n  }\r\n\r\n  return (\r\n    <div className=\"audio-list\">\r\n      <ul>\r\n        {audioFiles.map((audioFile, index) => (\r\n          <li key={audioFile.id}>\r\n            <div className=\"audio-metadata-container\">\r\n              {/* {audioFile.image && (\r\n                <img\r\n                  src={`data:image/jpeg;base64,${audioFile.image.data}`}\r\n                  alt={audioFile.title}\r\n                  loading=\"lazy\"\r\n                />\r\n              )} */}\r\n              <div className=\"button-container\">\r\n                <button\r\n                  className=\"play_pause\"\r\n                  onClick={() => handlePlayAudio(audioFile, index)}\r\n                >\r\n                  {currentTrackIndex === index && isPlaying ? \"||\" : \">\"}\r\n                </button>\r\n              </div>\r\n              <div className=\"title-author-container\">\r\n                <span className=\"title\">{audioFile.title}</span>\r\n                <span>{audioFile.author}</span>\r\n              </div>\r\n              <div className=\"duration-container\">\r\n                <span className=\"duration\">\r\n                  {formatDuration(audioFile.duration)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}