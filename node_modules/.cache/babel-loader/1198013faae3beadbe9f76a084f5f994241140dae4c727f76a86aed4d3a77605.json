{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\audioList\\\\AudioList.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\"; // Импорт хука useParams\n// import { useAudioContext } from \"../AudioContext\";\n// import \"./AudioList.css\";\n\n// const AudioList = () => {\n//   const { id } = useParams(); // Получение параметра id из URL\n\n//   const {\n//     currentTrack,\n//     setCurrentTrack,\n//     isPlaying,\n//     togglePlay,\n//     setIsPlaying,\n//     currentTrackIndex,\n//     setCurrentTrackIndex,\n//     audioFiles,\n//     audioRef,\n//     playlistId,\n//     setPlaylistId,\n//     localAudioFiles,\n//     setLocalAudioFiles,\n//     updateAudioFiles,\n//     updatePlaylist,\n//     audioId,\n//     setAudioId,\n//     currentPlaylistId,\n//     setCurrentPlaylistId,\n//   } = useAudioContext();\n\n//   const [isLocalPlaying, setIsLocalPlaying] = useState(false); // Дополнительное состояние для отслеживания локального воспроизведения\n\n//   useEffect(() => {\n//     console.log(currentPlaylistId);\n//   }, [id]);\n\n//   useEffect(() => {\n//     setPlaylistId(id);\n//     console.log(\n//       \"useEffect и fetct /playlists/${id}:\\n\\ncurrentPlaylistId = \" +\n//         currentPlaylistId +\n//         // \"\\nid = \" +\n//         // id +\n//         \"\\nplaylistId = \" +\n//         playlistId\n//     );\n//     if (\n//       currentPlaylistId === -1 ||\n//       currentPlaylistId !== playlistId ||\n//       !isPlaying\n//     ) {\n//       fetch(`http://localhost:8080/api/playlists/${id}`, { method: \"GET\" })\n//         .then((response) => response.json())\n//         .then((data) => {\n//           if (currentPlaylistId === -1 || currentPlaylistId !== playlistId) {\n//             updateAudioFiles(data);\n//           }\n//           // updatePlaylist(data);\n//         })\n//         .catch((error) => console.error(\"Error fetching data:\", error));\n//     }\n//   }, [id]);\n\n//   useEffect(() => {\n//     setIsLocalPlaying(isPlaying);\n//   }, [isPlaying]);\n\n//   const handleTogglePlay = () => {\n//     if (isLocalPlaying) {\n//       audioRef.current.pause(); // Пауза воспроизведения\n//     } else {\n//       audioRef.current.play(); // Возобновление воспроизведения\n//     }\n//     setIsLocalPlaying(!isLocalPlaying); // Изменение локального состояния воспроизведения\n//     togglePlay(); // Переключение состояния воспроизведения в контексте\n//   };\n\n//   const handlePlayAudio = async (audioFile, index) => {\n//     console.log(\n//       \"play/pause:\\n\\ncurrentPlaylistId = \" +\n//         currentPlaylistId +\n//         \"\\nid = \" + id +\n//         \"\\nplaylistId = \" +\n//         playlistId\n//     );\n//     if (\n//       currentTrackIndex === index &&\n//       currentPlaylistId === id &&\n//       audioId === audioFile.id\n//     ) {\n//       handleTogglePlay();\n//     } else {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:8080/api/audio/${audioFile.id}`\n//         );\n//         setAudioId(audioFile.id);\n\n//         // console.log(\n//         //   \"currentPlaylistId = \" +\n//         //     currentPlaylistId +\n//         //     \"\\nid = \" +\n//         //     id +\n//         //     \"\\nplaylistId = \" +\n//         //     playlistId\n//         // );\n\n//         // if (id !== currentPlaylistId) {\n//           setCurrentPlaylistId(id);\n//         // }\n\n//         // console.log(\n//         //   \"currentPlaylistId = \" +\n//         //     currentPlaylistId +\n//         //     \"\\nid = \" +\n//         //     id +\n//         //     \"\\nplaylistId = \" +\n//         //     playlistId\n//         // );\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! status: ${response.status}`);\n//         }\n//         const blob = await response.blob();\n//         const audioData = URL.createObjectURL(new Blob([blob]));\n\n//         setCurrentTrackIndex(index);\n//         setCurrentTrack({\n//           id: audioFile.id,\n//           audioUrl: audioData,\n//           trackName: audioFile.title,\n//           author: audioFile.author,\n//           imageUrl: audioFile.image\n//             ? `data:image/jpeg;base64,${audioFile.image.data}`\n//             : \"\",\n//           duration: audioFile.duration,\n//         });\n\n//         setIsPlaying(true);\n//       } catch (error) {\n//         console.error(\"Error fetching audio:\", error);\n//       }\n//     }\n//   };\n\n//   function formatDuration(duration) {\n//     const hours = Math.floor(duration / 3600);\n//     const minutes = Math.floor((duration % 3600) / 60);\n//     const seconds = Math.floor(duration % 60);\n\n//     let formattedTime = \"\";\n//     if (hours > 0) {\n//       formattedTime += hours + \":\";\n//     }\n//     if (hours > 0 && minutes < 10) {\n//       formattedTime += \"0\";\n//     }\n//     formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\n//     formattedTime += String(seconds).padStart(2, \"0\");\n\n//     return formattedTime;\n//   }\n\n//   return (\n//     <div className=\"audio-list\">\n//       <ul>\n//         {Array.isArray(localAudioFiles) &&\n//           localAudioFiles.map((audioFile, index) => (\n//             <li key={audioFile.id}>\n//               <div className=\"audio-metadata-container\">\n//                 {audioFile.image && (\n//                   <img\n//                     src={`data:image/jpeg;base64,${audioFile.image.data}`}\n//                     alt={audioFile.title}\n//                     loading=\"lazy\"\n//                   />\n//                 )}\n//                 <div className=\"button-container\">\n//                   <button\n//                     className=\"play_pause\"\n//                     onClick={() => handlePlayAudio(audioFile, index)}\n//                   >\n//                     {currentTrackIndex === index &&\n//                     currentPlaylistId === playlistId &&\n//                     // audioId === audioFile.id &&\n//                     isPlaying\n//                       ? \"||\"\n//                       : \">\"}\n//                   </button>\n//                 </div>\n//                 <div className=\"title-author-container\">\n//                   <span className=\"title\">{audioFile.title}</span>\n//                   <span>{audioFile.author}</span>\n//                 </div>\n//                 <div className=\"duration-container\">\n//                   <span className=\"duration\">\n//                     {formatDuration(audioFile.duration)}\n//                   </span>\n//                 </div>\n//               </div>\n//             </li>\n//           ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default AudioList;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\"; // Импорт хука useParams\nimport { useAudioContext } from \"../AudioContext\";\nimport \"./AudioList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioList = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Получение параметра id из URL\n\n  const {\n    setCurrentTrack,\n    isPlaying,\n    togglePlay,\n    setIsPlaying,\n    currentTrackIndex,\n    setCurrentTrackIndex,\n    audioFiles,\n    audioRef,\n    playlistId,\n    setPlaylistId,\n    localAudioFiles,\n    setLocalAudioFiles,\n    updateAudioFiles,\n    updatePlaylist,\n    currentPlaylistId,\n    setCurrentPlaylistId,\n    clearLocalAudioFiles\n  } = useAudioContext();\n  const [isLocalPlaying, setIsLocalPlaying] = useState(false); // Дополнительное состояние для отслеживания локального воспроизведения\n\n  useEffect(() => {\n    if (id !== playlistId) {\n      console.log(\"обновление id плейлиста в ссылке:\\nid = \" + id);\n      setPlaylistId(id);\n    }\n  }, [id]);\n  useEffect(() => {\n    if (id && typeof id === \"string\" && playlistId !== currentPlaylistId) {\n      if (playlistId !== currentPlaylistId) {\n        clearLocalAudioFiles();\n      }\n      console.log(\"GET плейлилиста:\\nplaylistId = \" + playlistId + \"\\ncurrentPlaylistId = \" + currentPlaylistId);\n      fetch(`http://localhost:8080/api/playlists/${id}`, {\n        method: \"GET\"\n      }).then(response => response.json()).then(fetchedPlaylistData => {\n        if (playlistId === -1) {\n          setLocalAudioFiles(Array.isArray(fetchedPlaylistData.audioFiles) ? fetchedPlaylistData.audioFiles : []);\n        }\n        if (currentPlaylistId === -2) {\n          updatePlaylist(fetchedPlaylistData);\n        }\n      }).catch(error => console.error(\"Error fetching data:\", error));\n    }\n  }, [playlistId]);\n  useEffect(() => {\n    setIsLocalPlaying(isPlaying);\n  }, [isPlaying]);\n  const handleTogglePlay = () => {\n    if (isLocalPlaying) {\n      audioRef.current.pause(); // Пауза воспроизведения\n    } else {\n      audioRef.current.play(); // Возобновление воспроизведения\n    }\n    setIsLocalPlaying(!isLocalPlaying); // Изменение локального состояния воспроизведения\n    togglePlay(); // Переключение состояния воспроизведения в контексте\n  };\n  const handlePlayAudio = async (audioFile, index) => {\n    console.log(\"handlePlayAudio:\\n\\ncurrentPlaylistId = \" + currentPlaylistId);\n    if (currentTrackIndex === index && playlistId === currentPlaylistId) {\n      handleTogglePlay();\n    } else {\n      try {\n        const response = await fetch(`http://localhost:8080/api/audio/${audioFile.id}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const blob = await response.blob();\n        const audioData = URL.createObjectURL(new Blob([blob]));\n        if (playlistId !== currentPlaylistId) {\n          setCurrentPlaylistId(playlistId);\n          // updatePlaylist(localAudioFiles);\n          console.log(\"setCurrentPlaylistId: = \" + currentPlaylistId);\n        }\n        setCurrentPlaylistId(playlistId);\n        setCurrentTrack({\n          id: audioFile.id,\n          audioUrl: audioData,\n          trackName: audioFile.title,\n          author: audioFile.author,\n          imageUrl: audioFile.image ? `data:image/jpeg;base64,${audioFile.image.data}` : \"\",\n          duration: audioFile.duration\n        });\n        setCurrentTrackIndex(index);\n        setIsPlaying(true);\n      } catch (error) {\n        console.error(\"Error fetching audio:\", error);\n      }\n    }\n  };\n  function formatDuration(duration) {\n    const hours = Math.floor(duration / 3600);\n    const minutes = Math.floor(duration % 3600 / 60);\n    const seconds = Math.floor(duration % 60);\n    let formattedTime = \"\";\n    if (hours > 0) {\n      formattedTime += hours + \":\";\n    }\n    if (hours > 0 && minutes < 10) {\n      formattedTime += \"0\";\n    }\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\n    formattedTime += String(seconds).padStart(2, \"0\");\n    return formattedTime;\n  }\n\n  // Временно (нужно переписать api, чтобы получать сам плейлист)\n  const getTotalDuration = () => {\n    let totalSeconds = 0;\n    localAudioFiles.forEach(audioFile => {\n      totalSeconds += audioFile.duration;\n    });\n    const minutes = Math.floor(totalSeconds / 60);\n    const remainingSeconds = (totalSeconds % 60).toFixed(2);\n    return minutes;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041F\\u043B\\u0435\\u0439\\u043B\\u0438\\u0441\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [localAudioFiles.length, \" \", localAudioFiles.length === 1 ? \"песня\" : localAudioFiles.length < 5 && localAudioFiles.length !== 0 ? \"песни\" : \"песен\", \", \", getTotalDuration(), \" \\u043C\\u0438\\u043D\\u0443\\u0442\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-list\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Array.isArray(localAudioFiles) && localAudioFiles.map((audioFile, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"audio-metadata-container\",\n            children: [audioFile.image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `data:image/jpeg;base64,${audioFile.image.data}`,\n              alt: audioFile.title,\n              loading: \"lazy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"play_pause\",\n                onClick: () => handlePlayAudio(audioFile, index),\n                children: currentTrackIndex === index && playlistId === currentPlaylistId && isPlaying ? \"||\" : \">\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"title-author-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"title\",\n                children: audioFile.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"author\",\n                children: audioFile.author\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"duration-container\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"duration\",\n                children: formatDuration(audioFile.duration)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 17\n          }, this)\n        }, audioFile.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioList, \"lNpe70Ir4OdWYGA9rZEY4IS+oVU=\", false, function () {\n  return [useParams, useAudioContext];\n});\n_c = AudioList;\nexport default AudioList;\nvar _c;\n$RefreshReg$(_c, \"AudioList\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useAudioContext","jsxDEV","_jsxDEV","AudioList","_s","id","setCurrentTrack","isPlaying","togglePlay","setIsPlaying","currentTrackIndex","setCurrentTrackIndex","audioFiles","audioRef","playlistId","setPlaylistId","localAudioFiles","setLocalAudioFiles","updateAudioFiles","updatePlaylist","currentPlaylistId","setCurrentPlaylistId","clearLocalAudioFiles","isLocalPlaying","setIsLocalPlaying","console","log","fetch","method","then","response","json","fetchedPlaylistData","Array","isArray","catch","error","handleTogglePlay","current","pause","play","handlePlayAudio","audioFile","index","ok","Error","status","blob","audioData","URL","createObjectURL","Blob","audioUrl","trackName","title","author","imageUrl","image","data","duration","formatDuration","hours","Math","floor","minutes","seconds","formattedTime","String","padStart","getTotalDuration","totalSeconds","forEach","remainingSeconds","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","src","alt","loading","onClick","_c","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/audioList/AudioList.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { useParams } from \"react-router-dom\"; // Импорт хука useParams\r\n// import { useAudioContext } from \"../AudioContext\";\r\n// import \"./AudioList.css\";\r\n\r\n// const AudioList = () => {\r\n//   const { id } = useParams(); // Получение параметра id из URL\r\n\r\n//   const {\r\n//     currentTrack,\r\n//     setCurrentTrack,\r\n//     isPlaying,\r\n//     togglePlay,\r\n//     setIsPlaying,\r\n//     currentTrackIndex,\r\n//     setCurrentTrackIndex,\r\n//     audioFiles,\r\n//     audioRef,\r\n//     playlistId,\r\n//     setPlaylistId,\r\n//     localAudioFiles,\r\n//     setLocalAudioFiles,\r\n//     updateAudioFiles,\r\n//     updatePlaylist,\r\n//     audioId,\r\n//     setAudioId,\r\n//     currentPlaylistId,\r\n//     setCurrentPlaylistId,\r\n//   } = useAudioContext();\r\n\r\n//   const [isLocalPlaying, setIsLocalPlaying] = useState(false); // Дополнительное состояние для отслеживания локального воспроизведения\r\n\r\n//   useEffect(() => {\r\n//     console.log(currentPlaylistId);\r\n//   }, [id]);\r\n\r\n//   useEffect(() => {\r\n//     setPlaylistId(id);\r\n//     console.log(\r\n//       \"useEffect и fetct /playlists/${id}:\\n\\ncurrentPlaylistId = \" +\r\n//         currentPlaylistId +\r\n//         // \"\\nid = \" +\r\n//         // id +\r\n//         \"\\nplaylistId = \" +\r\n//         playlistId\r\n//     );\r\n//     if (\r\n//       currentPlaylistId === -1 ||\r\n//       currentPlaylistId !== playlistId ||\r\n//       !isPlaying\r\n//     ) {\r\n//       fetch(`http://localhost:8080/api/playlists/${id}`, { method: \"GET\" })\r\n//         .then((response) => response.json())\r\n//         .then((data) => {\r\n//           if (currentPlaylistId === -1 || currentPlaylistId !== playlistId) {\r\n//             updateAudioFiles(data);\r\n//           }\r\n//           // updatePlaylist(data);\r\n//         })\r\n//         .catch((error) => console.error(\"Error fetching data:\", error));\r\n//     }\r\n//   }, [id]);\r\n\r\n//   useEffect(() => {\r\n//     setIsLocalPlaying(isPlaying);\r\n//   }, [isPlaying]);\r\n\r\n//   const handleTogglePlay = () => {\r\n//     if (isLocalPlaying) {\r\n//       audioRef.current.pause(); // Пауза воспроизведения\r\n//     } else {\r\n//       audioRef.current.play(); // Возобновление воспроизведения\r\n//     }\r\n//     setIsLocalPlaying(!isLocalPlaying); // Изменение локального состояния воспроизведения\r\n//     togglePlay(); // Переключение состояния воспроизведения в контексте\r\n//   };\r\n\r\n//   const handlePlayAudio = async (audioFile, index) => {\r\n//     console.log(\r\n//       \"play/pause:\\n\\ncurrentPlaylistId = \" +\r\n//         currentPlaylistId +\r\n//         \"\\nid = \" + id +\r\n//         \"\\nplaylistId = \" +\r\n//         playlistId\r\n//     );\r\n//     if (\r\n//       currentTrackIndex === index &&\r\n//       currentPlaylistId === id &&\r\n//       audioId === audioFile.id\r\n//     ) {\r\n//       handleTogglePlay();\r\n//     } else {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:8080/api/audio/${audioFile.id}`\r\n//         );\r\n//         setAudioId(audioFile.id);\r\n\r\n//         // console.log(\r\n//         //   \"currentPlaylistId = \" +\r\n//         //     currentPlaylistId +\r\n//         //     \"\\nid = \" +\r\n//         //     id +\r\n//         //     \"\\nplaylistId = \" +\r\n//         //     playlistId\r\n//         // );\r\n\r\n//         // if (id !== currentPlaylistId) {\r\n//           setCurrentPlaylistId(id);\r\n//         // }\r\n\r\n//         // console.log(\r\n//         //   \"currentPlaylistId = \" +\r\n//         //     currentPlaylistId +\r\n//         //     \"\\nid = \" +\r\n//         //     id +\r\n//         //     \"\\nplaylistId = \" +\r\n//         //     playlistId\r\n//         // );\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! status: ${response.status}`);\r\n//         }\r\n//         const blob = await response.blob();\r\n//         const audioData = URL.createObjectURL(new Blob([blob]));\r\n\r\n//         setCurrentTrackIndex(index);\r\n//         setCurrentTrack({\r\n//           id: audioFile.id,\r\n//           audioUrl: audioData,\r\n//           trackName: audioFile.title,\r\n//           author: audioFile.author,\r\n//           imageUrl: audioFile.image\r\n//             ? `data:image/jpeg;base64,${audioFile.image.data}`\r\n//             : \"\",\r\n//           duration: audioFile.duration,\r\n//         });\r\n\r\n//         setIsPlaying(true);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching audio:\", error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   function formatDuration(duration) {\r\n//     const hours = Math.floor(duration / 3600);\r\n//     const minutes = Math.floor((duration % 3600) / 60);\r\n//     const seconds = Math.floor(duration % 60);\r\n\r\n//     let formattedTime = \"\";\r\n//     if (hours > 0) {\r\n//       formattedTime += hours + \":\";\r\n//     }\r\n//     if (hours > 0 && minutes < 10) {\r\n//       formattedTime += \"0\";\r\n//     }\r\n//     formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\r\n//     formattedTime += String(seconds).padStart(2, \"0\");\r\n\r\n//     return formattedTime;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"audio-list\">\r\n//       <ul>\r\n//         {Array.isArray(localAudioFiles) &&\r\n//           localAudioFiles.map((audioFile, index) => (\r\n//             <li key={audioFile.id}>\r\n//               <div className=\"audio-metadata-container\">\r\n//                 {audioFile.image && (\r\n//                   <img\r\n//                     src={`data:image/jpeg;base64,${audioFile.image.data}`}\r\n//                     alt={audioFile.title}\r\n//                     loading=\"lazy\"\r\n//                   />\r\n//                 )}\r\n//                 <div className=\"button-container\">\r\n//                   <button\r\n//                     className=\"play_pause\"\r\n//                     onClick={() => handlePlayAudio(audioFile, index)}\r\n//                   >\r\n//                     {currentTrackIndex === index &&\r\n//                     currentPlaylistId === playlistId &&\r\n//                     // audioId === audioFile.id &&\r\n//                     isPlaying\r\n//                       ? \"||\"\r\n//                       : \">\"}\r\n//                   </button>\r\n//                 </div>\r\n//                 <div className=\"title-author-container\">\r\n//                   <span className=\"title\">{audioFile.title}</span>\r\n//                   <span>{audioFile.author}</span>\r\n//                 </div>\r\n//                 <div className=\"duration-container\">\r\n//                   <span className=\"duration\">\r\n//                     {formatDuration(audioFile.duration)}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AudioList;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\"; // Импорт хука useParams\r\nimport { useAudioContext } from \"../AudioContext\";\r\nimport \"./AudioList.css\";\r\n\r\nconst AudioList = () => {\r\n  const { id } = useParams(); // Получение параметра id из URL\r\n\r\n  const {\r\n    setCurrentTrack,\r\n    isPlaying,\r\n    togglePlay,\r\n    setIsPlaying,\r\n    currentTrackIndex,\r\n    setCurrentTrackIndex,\r\n    audioFiles,\r\n    audioRef,\r\n    playlistId,\r\n    setPlaylistId,\r\n    localAudioFiles,\r\n    setLocalAudioFiles,\r\n    updateAudioFiles,\r\n    updatePlaylist,\r\n    currentPlaylistId,\r\n    setCurrentPlaylistId,\r\n    clearLocalAudioFiles,\r\n  } = useAudioContext();\r\n\r\n  const [isLocalPlaying, setIsLocalPlaying] = useState(false); // Дополнительное состояние для отслеживания локального воспроизведения\r\n\r\n  useEffect(() => {\r\n    if (id !== playlistId) {\r\n      console.log(\"обновление id плейлиста в ссылке:\\nid = \" + id);\r\n      setPlaylistId(id);\r\n    }\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    if (id && typeof id === \"string\" && playlistId !== currentPlaylistId) {\r\n      if (playlistId !== currentPlaylistId) {\r\n        clearLocalAudioFiles();\r\n      }\r\n\r\n      console.log(\r\n        \"GET плейлилиста:\\nplaylistId = \" +\r\n          playlistId +\r\n          \"\\ncurrentPlaylistId = \" +\r\n          currentPlaylistId\r\n      );\r\n\r\n      fetch(`http://localhost:8080/api/playlists/${id}`, { method: \"GET\" })\r\n        .then((response) => response.json())\r\n        .then((fetchedPlaylistData) => {\r\n          if (playlistId === -1) {\r\n            setLocalAudioFiles(\r\n              Array.isArray(fetchedPlaylistData.audioFiles)\r\n                ? fetchedPlaylistData.audioFiles\r\n                : []\r\n            );\r\n          }\r\n          if (currentPlaylistId === -2) {\r\n            updatePlaylist(fetchedPlaylistData);\r\n          }\r\n        })\r\n        .catch((error) => console.error(\"Error fetching data:\", error));\r\n    }\r\n  }, [playlistId]);\r\n\r\n  useEffect(() => {\r\n    setIsLocalPlaying(isPlaying);\r\n  }, [isPlaying]);\r\n\r\n  const handleTogglePlay = () => {\r\n    if (isLocalPlaying) {\r\n      audioRef.current.pause(); // Пауза воспроизведения\r\n    } else {\r\n      audioRef.current.play(); // Возобновление воспроизведения\r\n    }\r\n    setIsLocalPlaying(!isLocalPlaying); // Изменение локального состояния воспроизведения\r\n    togglePlay(); // Переключение состояния воспроизведения в контексте\r\n  };\r\n\r\n  const handlePlayAudio = async (audioFile, index) => {\r\n    console.log(\"handlePlayAudio:\\n\\ncurrentPlaylistId = \" + currentPlaylistId);\r\n    if (currentTrackIndex === index && playlistId === currentPlaylistId) {\r\n      handleTogglePlay();\r\n    } else {\r\n      \r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:8080/api/audio/${audioFile.id}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const blob = await response.blob();\r\n        const audioData = URL.createObjectURL(new Blob([blob]));\r\n\r\n        if (playlistId !== currentPlaylistId) {\r\n          setCurrentPlaylistId(playlistId);\r\n          // updatePlaylist(localAudioFiles);\r\n          console.log(\"setCurrentPlaylistId: = \" + currentPlaylistId);\r\n        }\r\n\r\n        setCurrentPlaylistId(playlistId);\r\n\r\n        setCurrentTrack({\r\n          id: audioFile.id,\r\n          audioUrl: audioData,\r\n          trackName: audioFile.title,\r\n          author: audioFile.author,\r\n          imageUrl: audioFile.image\r\n            ? `data:image/jpeg;base64,${audioFile.image.data}`\r\n            : \"\",\r\n          duration: audioFile.duration,\r\n        });\r\n\r\n        setCurrentTrackIndex(index);\r\n        setIsPlaying(true);\r\n      } catch (error) {\r\n        console.error(\"Error fetching audio:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  function formatDuration(duration) {\r\n    const hours = Math.floor(duration / 3600);\r\n    const minutes = Math.floor((duration % 3600) / 60);\r\n    const seconds = Math.floor(duration % 60);\r\n\r\n    let formattedTime = \"\";\r\n    if (hours > 0) {\r\n      formattedTime += hours + \":\";\r\n    }\r\n    if (hours > 0 && minutes < 10) {\r\n      formattedTime += \"0\";\r\n    }\r\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\r\n    formattedTime += String(seconds).padStart(2, \"0\");\r\n\r\n    return formattedTime;\r\n  }\r\n\r\n  // Временно (нужно переписать api, чтобы получать сам плейлист)\r\n  const getTotalDuration = () => {\r\n    let totalSeconds = 0;\r\n    localAudioFiles.forEach((audioFile) => {\r\n      totalSeconds += audioFile.duration;\r\n    });\r\n\r\n    const minutes = Math.floor(totalSeconds / 60);\r\n    const remainingSeconds = (totalSeconds % 60).toFixed(2);\r\n\r\n    return minutes;\r\n  };\r\n\r\n  return (\r\n    <div className=\"audio-list-container\">\r\n      <div className=\"playlist-info\">\r\n        <h2>Плейлист</h2>\r\n        <p>\r\n          {localAudioFiles.length}{\" \"}\r\n          {localAudioFiles.length === 1\r\n            ? \"песня\"\r\n            : localAudioFiles.length < 5 && localAudioFiles.length !== 0\r\n            ? \"песни\"\r\n            : \"песен\"}\r\n          , {getTotalDuration()} минут\r\n        </p>\r\n      </div>\r\n      <div className=\"audio-list\">\r\n        <ul>\r\n          {Array.isArray(localAudioFiles) &&\r\n            localAudioFiles.map((audioFile, index) => (\r\n              <li key={audioFile.id}>\r\n                <div className=\"audio-metadata-container\">\r\n                  {audioFile.image && (\r\n                    <img\r\n                      src={`data:image/jpeg;base64,${audioFile.image.data}`}\r\n                      alt={audioFile.title}\r\n                      loading=\"lazy\"\r\n                    />\r\n                  )}\r\n                  <div className=\"button-container\">\r\n                    <button\r\n                      className=\"play_pause\"\r\n                      onClick={() => handlePlayAudio(audioFile, index)}\r\n                    >\r\n                      {currentTrackIndex === index &&\r\n                      playlistId === currentPlaylistId &&\r\n                      isPlaying\r\n                        ? \"||\"\r\n                        : \">\"}\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"title-author-container\">\r\n                    <span className=\"title\">{audioFile.title}</span>\r\n                    <span className=\"author\">{audioFile.author}</span>\r\n                  </div>\r\n                  <div className=\"duration-container\">\r\n                    <span className=\"duration\">\r\n                      {formatDuration(audioFile.duration)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioList;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,SAASC,eAAe,QAAQ,iBAAiB;AACjD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAG,CAAC,G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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}