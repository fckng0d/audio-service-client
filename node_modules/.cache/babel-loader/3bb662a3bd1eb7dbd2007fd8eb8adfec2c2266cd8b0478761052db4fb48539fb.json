{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\AudioContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AudioProvider.js\nimport React, { createContext, useState, useContext, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioContext = /*#__PURE__*/createContext();\nexport const useAudioContext = () => {\n  _s();\n  return useContext(AudioContext);\n};\n_s(useAudioContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AudioProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [audioFiles, setAudioFiles] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);\n  const audioRef = useRef(null);\n  const updateAudioFiles = data => {\n    setAudioFiles(data);\n    if (currentTrackIndex !== -1) {\n      const currentAudioFile = data[currentTrackIndex];\n      const {\n        id,\n        title,\n        author,\n        image\n      } = currentAudioFile;\n      const imageUrl = image ? `data:image/jpeg;base64,${image.data}` : \"\";\n      const audioUrl = currentAudioFile.audioUrl; // Заменить на актуальный способ получения URL аудио\n\n      setCurrentTrack({\n        id,\n        audioUrl,\n        trackName: title,\n        author,\n        imageUrl\n      });\n    }\n  };\n  useEffect(() => {\n    if (currentTrackIndex !== -1) {\n      setCurrentTrack({\n        id: audioFiles[currentTrackIndex].id,\n        audioUrl: \"\",\n        // Оставляем пустым, так как нам нужно заново загрузить аудио при переключении трека\n        trackName: audioFiles[currentTrackIndex].title,\n        author: audioFiles[currentTrackIndex].author,\n        imageUrl: audioFiles[currentTrackIndex].image ? `data:image/jpeg;base64,${audioFiles[currentTrackIndex].image.data}` : \"\"\n      });\n    }\n  }, [audioFiles, currentTrackIndex]);\n  const playNextTrack = () => {\n    if (currentTrackIndex === audioFiles.length - 1) return;\n    const nextIndex = currentTrackIndex + 1;\n    setCurrentTrackIndex(nextIndex);\n  };\n  const playPreviousTrack = () => {\n    if (currentTrackIndex === 0) return;\n    const previousIndex = currentTrackIndex - 1;\n    setCurrentTrackIndex(previousIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(AudioContext.Provider, {\n    value: {\n      currentTrack,\n      setCurrentTrack,\n      isPlaying,\n      setIsPlaying,\n      volume,\n      setVolume,\n      audioFiles,\n      updateAudioFiles,\n      currentTrackIndex,\n      setCurrentTrackIndex,\n      audioRef,\n      playNextTrack,\n      playPreviousTrack\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s2(AudioProvider, \"8dMX2JOlSzbHDPB6vdC6BI7VzbM=\");\n_c = AudioProvider;\nAudioProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"AudioProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useRef","PropTypes","jsxDEV","_jsxDEV","AudioContext","useAudioContext","_s","AudioProvider","children","_s2","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","volume","setVolume","audioFiles","setAudioFiles","currentTrackIndex","setCurrentTrackIndex","audioRef","updateAudioFiles","data","currentAudioFile","id","title","author","image","imageUrl","audioUrl","trackName","playNextTrack","length","nextIndex","playPreviousTrack","previousIndex","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/AudioContext.js"],"sourcesContent":["// AudioProvider.js\r\nimport React, { createContext, useState, useContext, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AudioContext = createContext();\r\n\r\nexport const useAudioContext = () => useContext(AudioContext);\r\n\r\nexport const AudioProvider = ({ children }) => {\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [volume, setVolume] = useState(1);\r\n  const [audioFiles, setAudioFiles] = useState([]);\r\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(-1);\r\n  const audioRef = useRef(null);\r\n\r\n  const updateAudioFiles = (data) => {\r\n  setAudioFiles(data);\r\n  if (currentTrackIndex !== -1) {\r\n    const currentAudioFile = data[currentTrackIndex];\r\n    const { id, title, author, image } = currentAudioFile;\r\n    const imageUrl = image ? `data:image/jpeg;base64,${image.data}` : \"\";\r\n    const audioUrl = currentAudioFile.audioUrl; // Заменить на актуальный способ получения URL аудио\r\n\r\n    setCurrentTrack({\r\n      id,\r\n      audioUrl,\r\n      trackName: title,\r\n      author,\r\n      imageUrl,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n    if (currentTrackIndex !== -1) {\r\n      setCurrentTrack({\r\n        id: audioFiles[currentTrackIndex].id,\r\n        audioUrl: \"\", // Оставляем пустым, так как нам нужно заново загрузить аудио при переключении трека\r\n        trackName: audioFiles[currentTrackIndex].title,\r\n        author: audioFiles[currentTrackIndex].author,\r\n        imageUrl: audioFiles[currentTrackIndex].image ? `data:image/jpeg;base64,${audioFiles[currentTrackIndex].image.data}` : \"\",\r\n      });\r\n    }\r\n  }, [audioFiles, currentTrackIndex]);\r\n\r\n  const playNextTrack = () => {\r\n    if (currentTrackIndex === audioFiles.length - 1) return;\r\n    const nextIndex = currentTrackIndex + 1;\r\n    setCurrentTrackIndex(nextIndex);\r\n  };\r\n\r\n  const playPreviousTrack = () => {\r\n    if (currentTrackIndex === 0) return;\r\n    const previousIndex = currentTrackIndex - 1;\r\n    setCurrentTrackIndex(previousIndex);\r\n  };\r\n\r\n  return (\r\n    <AudioContext.Provider\r\n      value={{\r\n        currentTrack,\r\n        setCurrentTrack,\r\n        isPlaying,\r\n        setIsPlaying,\r\n        volume,\r\n        setVolume,\r\n        audioFiles,\r\n        updateAudioFiles,\r\n        currentTrackIndex,\r\n        setCurrentTrackIndex,\r\n        audioRef,\r\n        playNextTrack,\r\n        playPreviousTrack,\r\n      }}\r\n    >\r\n      {children}\r\n    </AudioContext.Provider>\r\n  );\r\n};\r\n\r\nAudioProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}