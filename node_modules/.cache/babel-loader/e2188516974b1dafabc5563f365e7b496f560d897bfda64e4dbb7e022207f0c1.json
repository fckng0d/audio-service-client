{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\audioList\\\\AudioList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useAudioContext } from \"../AudioContext\";\nimport \"./AudioList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioList = () => {\n  _s();\n  const {\n    setCurrentTrack,\n    isPlaying,\n    togglePlay,\n    setIsPlaying,\n    currentTrackIndex,\n    setCurrentTrackIndex,\n    updateAudioFiles,\n    audioFiles,\n    audioRef,\n    currentTime,\n    setCurrentTime\n  } = useAudioContext();\n  const [isMusicPlayingFromControls, setIsMusicPlayingFromControls] = useState(false);\n  useEffect(() => {\n    fetch(\"http://localhost:8080/audio\", {\n      method: \"GET\"\n    }).then(response => response.json()).then(data => {\n      if (!isMusicPlayingFromControls) {\n        // Обновляем список аудиофайлов только если музыка не играет из AudioControls\n        updateAudioFiles(data);\n      }\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, [isMusicPlayingFromControls]); // Зависимость от isMusicPlayingFromControls\n\n  const handleTogglePlay = () => {\n    if (isPlaying) {\n      setCurrentTime(audioRef.current.currentTime);\n      audioRef.current.pause();\n    } else {\n      audioRef.current.currentTime = currentTime;\n      audioRef.current.play();\n    }\n    togglePlay();\n  };\n  const handlePlayAudio = async (audioFile, index) => {\n    console.log(index + \" : \" + currentTrackIndex);\n    if (currentTrackIndex === index) {\n      handleTogglePlay();\n    } else {\n      try {\n        const response = await fetch(`http://localhost:8080/audio/${audioFile.id}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const blob = await response.blob();\n        const audioData = URL.createObjectURL(new Blob([blob]));\n        setCurrentTrackIndex(index);\n        setCurrentTrack({\n          id: audioFile.id,\n          audioUrl: audioData,\n          trackName: audioFile.title,\n          author: audioFile.author,\n          imageUrl: audioFile.image ? `data:image/jpeg;base64,${audioFile.image.data}` : \"\"\n        });\n        setIsPlaying(true);\n        setIsMusicPlayingFromControls(false); // Устанавливаем, что музыка не играет из AudioControls\n      } catch (error) {\n        console.error(\"Error fetching audio:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-list\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: audioFiles.map((audioFile, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"audio-metadata-container\",\n          children: [audioFile.image && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/jpeg;base64,${audioFile.image.data}`,\n            alt: audioFile.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"play_pause\",\n              onClick: () => handlePlayAudio(audioFile, index),\n              children: currentTrackIndex === index && isPlaying ? \"||\" : \">\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-author-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"title\",\n              children: audioFile.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: audioFile.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"duration-container\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"duration\",\n              children: audioFile.duration\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, audioFile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioList, \"jOA2TIokHh5BdbBwhc47/h47tU0=\", false, function () {\n  return [useAudioContext];\n});\n_c = AudioList;\nexport default AudioList;\n\n// import React, { useEffect } from \"react\";\n// import { useAudioContext } from \"../AudioContext\";\n// import \"./AudioList.css\";\n\n// const AudioList = () => {\n//   const {\n//     currentTrack,\n//     setCurrentTrack,\n//     isPlaying,\n//     setIsPlaying,\n//     togglePlay,\n//     currentTrackIndex,\n//     setCurrentTrackIndex,\n//     updateAudioFiles,\n//     audioFiles,\n//     audioRef,\n//   } = useAudioContext();\n\n//   useEffect(() => {\n//     fetch(\"http://localhost:8080/audio\", { method: \"GET\" })\n//       .then((response) => response.json())\n//       .then((data) => updateAudioFiles(data))\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   useEffect(() => {\n//     if (audioRef.current.src && currentTrack) {\n//       // Проверяем, установлен ли уже src аудио\n//       audioRef.current.src = currentTrack.audioUrl;\n//     }\n//   }, [currentTrack]);\n\n//   const handleTogglePlay = async () => {\n//     if (!audioRef.current.src && currentTrack) {\n//       // Проверяем, установлен ли уже src аудио\n//       audioRef.current.src = currentTrack.audioUrl;\n//     }\n//     if (isPlaying) {\n//       const currentTime = audioRef.current.currentTime;\n//       audioRef.current.pause();\n//       audioRef.current.currentTime = currentTime;\n//     } else {\n//       try {\n//         await audioRef.current.play();\n//       } catch (error) {\n//         console.error(\"Error playing audio:\", error);\n//       }\n//     }\n//     togglePlay();\n//   };\n\n//   const handlePlayAudio = async (audioFile, index) => {\n//     if (currentTrackIndex === index && isPlaying) {\n//       handleTogglePlay();\n//     } else {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:8080/audio/${audioFile.id}`\n//         );\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! status: ${response.status}`);\n//         }\n//         const blob = await response.blob();\n//         const audioData = URL.createObjectURL(new Blob([blob]));\n\n//         setCurrentTrackIndex(index);\n//         setCurrentTrack({\n//           id: audioFile.id,\n//           audioUrl: audioData,\n//           trackName: audioFile.title,\n//           author: audioFile.author,\n//           imageUrl: audioFile.image\n//             ? `data:image/jpeg;base64,${audioFile.image.data}`\n//             : \"\",\n//         });\n\n//         // Вызывайте handleTogglePlay после обновления текущего трека\n//         handleTogglePlay();\n//       } catch (error) {\n//         console.error(\"Error fetching audio:\", error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div className=\"audio-list\">\n//       <ul>\n//         {audioFiles.map((audioFile, index) => (\n//           <li key={audioFile.id}>\n//             <div className=\"audio-metadata-container\">\n//               {audioFile.image && (\n//                 <img\n//                   src={`data:image/jpeg;base64,${audioFile.image.data}`}\n//                   alt={audioFile.title}\n//                 />\n//               )}\n//               <div className=\"button-container\">\n//                 <button\n//                   className=\"play_pause\"\n//                   onClick={() => {\n//                     handlePlayAudio(audioFile, index);\n//                     // handleTogglePlay();\n//                   }}\n//                 >\n//                   {currentTrackIndex === index ? (isPlaying ? \"||\" : \">\") : \">\"}\n//                 </button>\n//               </div>\n//               <div className=\"title-author-container\">\n//                 <span className=\"title\">{audioFile.title}</span>\n//                 <span>{audioFile.author}</span>\n//               </div>\n//               <div className=\"duration-container\">\n//                 <span className=\"duration\">{audioFile.duration}</span>\n//               </div>\n//             </div>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default AudioList;\nvar _c;\n$RefreshReg$(_c, \"AudioList\");","map":{"version":3,"names":["React","useEffect","useState","useAudioContext","jsxDEV","_jsxDEV","AudioList","_s","setCurrentTrack","isPlaying","togglePlay","setIsPlaying","currentTrackIndex","setCurrentTrackIndex","updateAudioFiles","audioFiles","audioRef","currentTime","setCurrentTime","isMusicPlayingFromControls","setIsMusicPlayingFromControls","fetch","method","then","response","json","data","catch","error","console","handleTogglePlay","current","pause","play","handlePlayAudio","audioFile","index","log","id","ok","Error","status","blob","audioData","URL","createObjectURL","Blob","audioUrl","trackName","title","author","imageUrl","image","className","children","map","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","duration","_c","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/audioList/AudioList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAudioContext } from \"../AudioContext\";\r\nimport \"./AudioList.css\";\r\n\r\nconst AudioList = () => {\r\n  const {\r\n    setCurrentTrack,\r\n    isPlaying,\r\n    togglePlay,\r\n    setIsPlaying,\r\n    currentTrackIndex,\r\n    setCurrentTrackIndex,\r\n    updateAudioFiles,\r\n    audioFiles,\r\n    audioRef,\r\n    currentTime,\r\n    setCurrentTime,\r\n  } = useAudioContext();\r\n\r\n  const [isMusicPlayingFromControls, setIsMusicPlayingFromControls] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:8080/audio\", { method: \"GET\" })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (!isMusicPlayingFromControls) {\r\n          // Обновляем список аудиофайлов только если музыка не играет из AudioControls\r\n          updateAudioFiles(data);\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error fetching data:\", error));\r\n  }, [isMusicPlayingFromControls]); // Зависимость от isMusicPlayingFromControls\r\n\r\n  const handleTogglePlay = () => {\r\n    if (isPlaying) {\r\n      setCurrentTime(audioRef.current.currentTime);\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.currentTime = currentTime;\r\n      audioRef.current.play();\r\n    }\r\n    togglePlay();\r\n  };\r\n\r\n  const handlePlayAudio = async (audioFile, index) => {\r\n    console.log(index + \" : \" + currentTrackIndex)\r\n    if (currentTrackIndex === index) {\r\n      handleTogglePlay(); \r\n    } else {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:8080/audio/${audioFile.id}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const blob = await response.blob();\r\n        const audioData = URL.createObjectURL(new Blob([blob]));\r\n\r\n        setCurrentTrackIndex(index);\r\n        setCurrentTrack({\r\n          id: audioFile.id,\r\n          audioUrl: audioData,\r\n          trackName: audioFile.title,\r\n          author: audioFile.author,\r\n          imageUrl: audioFile.image\r\n            ? `data:image/jpeg;base64,${audioFile.image.data}`\r\n            : \"\",\r\n        });\r\n        setIsPlaying(true);\r\n        setIsMusicPlayingFromControls(false); // Устанавливаем, что музыка не играет из AudioControls\r\n      } catch (error) {\r\n        console.error(\"Error fetching audio:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"audio-list\">\r\n      <ul>\r\n        {audioFiles.map((audioFile, index) => (\r\n          <li key={audioFile.id}>\r\n            <div className=\"audio-metadata-container\">\r\n              {audioFile.image && (\r\n                <img\r\n                  src={`data:image/jpeg;base64,${audioFile.image.data}`}\r\n                  alt={audioFile.title}\r\n                />\r\n              )}\r\n              <div className=\"button-container\">\r\n                <button\r\n                  className=\"play_pause\"\r\n                  onClick={() => handlePlayAudio(audioFile, index)}\r\n                >\r\n                  {currentTrackIndex === index && isPlaying ? \"||\" : \">\"}\r\n                </button>\r\n              </div>\r\n              <div className=\"title-author-container\">\r\n                <span className=\"title\">{audioFile.title}</span>\r\n                <span>{audioFile.author}</span>\r\n              </div>\r\n              <div className=\"duration-container\">\r\n                <span className=\"duration\">{audioFile.duration}</span>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioList;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect } from \"react\";\r\n// import { useAudioContext } from \"../AudioContext\";\r\n// import \"./AudioList.css\";\r\n\r\n// const AudioList = () => {\r\n//   const {\r\n//     currentTrack,\r\n//     setCurrentTrack,\r\n//     isPlaying,\r\n//     setIsPlaying,\r\n//     togglePlay,\r\n//     currentTrackIndex,\r\n//     setCurrentTrackIndex,\r\n//     updateAudioFiles,\r\n//     audioFiles,\r\n//     audioRef,\r\n//   } = useAudioContext();\r\n\r\n//   useEffect(() => {\r\n//     fetch(\"http://localhost:8080/audio\", { method: \"GET\" })\r\n//       .then((response) => response.json())\r\n//       .then((data) => updateAudioFiles(data))\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (audioRef.current.src && currentTrack) {\r\n//       // Проверяем, установлен ли уже src аудио\r\n//       audioRef.current.src = currentTrack.audioUrl;\r\n//     }\r\n//   }, [currentTrack]);\r\n\r\n//   const handleTogglePlay = async () => {\r\n//     if (!audioRef.current.src && currentTrack) {\r\n//       // Проверяем, установлен ли уже src аудио\r\n//       audioRef.current.src = currentTrack.audioUrl;\r\n//     }\r\n//     if (isPlaying) {\r\n//       const currentTime = audioRef.current.currentTime;\r\n//       audioRef.current.pause();\r\n//       audioRef.current.currentTime = currentTime;\r\n//     } else {\r\n//       try {\r\n//         await audioRef.current.play();\r\n//       } catch (error) {\r\n//         console.error(\"Error playing audio:\", error);\r\n//       }\r\n//     }\r\n//     togglePlay();\r\n//   };\r\n\r\n//   const handlePlayAudio = async (audioFile, index) => {\r\n//     if (currentTrackIndex === index && isPlaying) {\r\n//       handleTogglePlay();\r\n//     } else {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:8080/audio/${audioFile.id}`\r\n//         );\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! status: ${response.status}`);\r\n//         }\r\n//         const blob = await response.blob();\r\n//         const audioData = URL.createObjectURL(new Blob([blob]));\r\n\r\n//         setCurrentTrackIndex(index);\r\n//         setCurrentTrack({\r\n//           id: audioFile.id,\r\n//           audioUrl: audioData,\r\n//           trackName: audioFile.title,\r\n//           author: audioFile.author,\r\n//           imageUrl: audioFile.image\r\n//             ? `data:image/jpeg;base64,${audioFile.image.data}`\r\n//             : \"\",\r\n//         });\r\n\r\n//         // Вызывайте handleTogglePlay после обновления текущего трека\r\n//         handleTogglePlay();\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching audio:\", error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"audio-list\">\r\n//       <ul>\r\n//         {audioFiles.map((audioFile, index) => (\r\n//           <li key={audioFile.id}>\r\n//             <div className=\"audio-metadata-container\">\r\n//               {audioFile.image && (\r\n//                 <img\r\n//                   src={`data:image/jpeg;base64,${audioFile.image.data}`}\r\n//                   alt={audioFile.title}\r\n//                 />\r\n//               )}\r\n//               <div className=\"button-container\">\r\n//                 <button\r\n//                   className=\"play_pause\"\r\n//                   onClick={() => {\r\n//                     handlePlayAudio(audioFile, index);\r\n//                     // handleTogglePlay();\r\n//                   }}\r\n//                 >\r\n//                   {currentTrackIndex === index ? (isPlaying ? \"||\" : \">\") : \">\"}\r\n//                 </button>\r\n//               </div>\r\n//               <div className=\"title-author-container\">\r\n//                 <span className=\"title\">{audioFile.title}</span>\r\n//                 <span>{audioFile.author}</span>\r\n//               </div>\r\n//               <div className=\"duration-container\">\r\n//                 <span className=\"duration\">{audioFile.duration}</span>\r\n//               </div>\r\n//             </div>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AudioList;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}