{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0412\\u044F\\u0442\\u0413\\u0423\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\\\u0421\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 4\\\\Web\\\\\\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\\\audio-service\\\\audio-service-client\\\\src\\\\components\\\\audioList\\\\AudioList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useAudioContext } from \"../AudioContext\";\nimport \"./AudioList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioList = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    currentTrack,\n    setCurrentTrack,\n    isPlaying,\n    togglePlay,\n    setIsPlaying,\n    currentTrackIndex,\n    setCurrentTrackIndex,\n    audioFiles,\n    audioRef,\n    playlistId,\n    setPlaylistId,\n    localAudioFiles,\n    setLocalAudioFiles,\n    updateAudioFiles,\n    audioId,\n    setAudioId,\n    currentPlaylistId,\n    setCurrentPlaylistId\n  } = useAudioContext();\n  const [isLocalPlaying, setIsLocalPlaying] = useState(false);\n  useEffect(() => {\n    setPlaylistId(id);\n    setCurrentPlaylistId(id); // Обновляем текущий плейлист в контексте\n  }, [id]);\n  useEffect(() => {\n    // Обновляем локальные аудиофайлы, только если они еще не установлены или плейлист изменился\n    if (!localAudioFiles.length || currentPlaylistId !== id) {\n      setLocalAudioFiles(audioFiles);\n    }\n  }, [audioFiles, currentPlaylistId, id, setLocalAudioFiles, localAudioFiles]);\n  const handleTogglePlay = () => {\n    if (isLocalPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsLocalPlaying(!isLocalPlaying);\n    togglePlay();\n  };\n  const handlePlayAudio = async (audioFile, index) => {\n    if (currentTrackIndex === index && currentPlaylistId === id && audioId === audioFile.id) {\n      handleTogglePlay();\n    } else {\n      try {\n        const response = await fetch(`http://localhost:8080/api/audio/${audioFile.id}`);\n        setAudioId(audioFile.id);\n        if (id !== currentPlaylistId) {\n          setCurrentPlaylistId(id);\n        }\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const blob = await response.blob();\n        const audioData = URL.createObjectURL(new Blob([blob]));\n        setCurrentTrackIndex(index);\n        setCurrentTrack({\n          id: audioFile.id,\n          audioUrl: audioData,\n          trackName: audioFile.title,\n          author: audioFile.author,\n          imageUrl: audioFile.image ? `data:image/jpeg;base64,${audioFile.image.data}` : \"\",\n          duration: audioFile.duration\n        });\n        setIsPlaying(true);\n      } catch (error) {\n        console.error(\"Error fetching audio:\", error);\n      }\n    }\n  };\n  function formatDuration(duration) {\n    const hours = Math.floor(duration / 3600);\n    const minutes = Math.floor(duration % 3600 / 60);\n    const seconds = Math.floor(duration % 60);\n    let formattedTime = \"\";\n    if (hours > 0) {\n      formattedTime += hours + \":\";\n    }\n    if (hours > 0 && minutes < 10) {\n      formattedTime += \"0\";\n    }\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\n    formattedTime += String(seconds).padStart(2, \"0\");\n    return formattedTime;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-list\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.isArray(localAudioFiles) && localAudioFiles.map((audioFile, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"audio-metadata-container\",\n          children: [audioFile.image && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/jpeg;base64,${audioFile.image.data}`,\n            alt: audioFile.title,\n            loading: \"lazy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"play_pause\",\n              onClick: () => handlePlayAudio(audioFile, index),\n              children: currentTrackIndex === index && currentPlaylistId === id && isPlaying ? \"||\" : \">\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-author-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"title\",\n              children: audioFile.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: audioFile.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"duration-container\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"duration\",\n              children: formatDuration(audioFile.duration)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this)\n      }, audioFile.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioList, \"L6Iu+LkJJZ5OdUhdW/yFBssK0vc=\", false, function () {\n  return [useParams, useAudioContext];\n});\n_c = AudioList;\nexport default AudioList;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\"; // Импорт хука useParams\n// import { useAudioContext } from \"../AudioContext\";\n// import \"./AudioList.css\";\n\n// const AudioList = () => {\n//   const { id } = useParams(); // Получение параметра id из URL\n\n//   const {\n//     setCurrentTrack,\n//     isPlaying,\n//     togglePlay,\n//     setIsPlaying,\n//     currentTrackIndex,\n//     setCurrentTrackIndex,\n//     audioFiles,\n//     audioRef,\n//     playlistId,\n//     setPlaylistId,\n//     localAudioFiles,\n//     setLocalAudioFiles,\n//     updateAudioFiles,\n//     updatePlaylist\n//   } = useAudioContext();\n\n//   const [isLocalPlaying, setIsLocalPlaying] = useState(false); // Дополнительное состояние для отслеживания локального воспроизведения\n\n//   useEffect(() => {\n//     setPlaylistId(id);\n//     if (id && typeof id === \"string\" && playlistId !== id) {\n//       fetch(`http://localhost:8080/api/playlists/${id}`, { method: \"GET\" })\n//         .then((response) => response.json())\n//         .then((data) => {\n//           if (!isPlaying) {\n//             updateAudioFiles(data);\n//           }\n//           updatePlaylist(data);\n//         })\n//         .catch((error) => console.error(\"Error fetching data:\", error));\n//     }\n//   }, [id]);\n\n//   useEffect(() => {\n//     setIsLocalPlaying(isPlaying);\n//   }, [isPlaying]);\n\n//   const handleTogglePlay = () => {\n//     if (isLocalPlaying) {\n//       audioRef.current.pause(); // Пауза воспроизведения\n//     } else {\n//       audioRef.current.play(); // Возобновление воспроизведения\n//     }\n//     setIsLocalPlaying(!isLocalPlaying); // Изменение локального состояния воспроизведения\n//     togglePlay(); // Переключение состояния воспроизведения в контексте\n//   };\n\n//   const handlePlayAudio = async (audioFile, index) => {\n//     if (currentTrackIndex === index && playlistId === id) {\n//       handleTogglePlay();\n//     } else {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:8080/api/audio/${audioFile.id}`\n//         );\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! status: ${response.status}`);\n//         }\n//         const blob = await response.blob();\n//         const audioData = URL.createObjectURL(new Blob([blob]));\n\n//         setCurrentTrackIndex(index);\n//         setCurrentTrack({\n//           id: audioFile.id,\n//           audioUrl: audioData,\n//           trackName: audioFile.title,\n//           author: audioFile.author,\n//           imageUrl: audioFile.image\n//             ? `data:image/jpeg;base64,${audioFile.image.data}`\n//             : \"\",\n//           duration: audioFile.duration,\n//         });\n//         setIsPlaying(true);\n//       } catch (error) {\n//         console.error(\"Error fetching audio:\", error);\n//       }\n//     }\n//   };\n\n//   function formatDuration(duration) {\n//     const hours = Math.floor(duration / 3600);\n//     const minutes = Math.floor((duration % 3600) / 60);\n//     const seconds = Math.floor(duration % 60);\n\n//     let formattedTime = \"\";\n//     if (hours > 0) {\n//       formattedTime += hours + \":\";\n//     }\n//     if (hours > 0 && minutes < 10) {\n//       formattedTime += \"0\";\n//     }\n//     formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\n//     formattedTime += String(seconds).padStart(2, \"0\");\n\n//     return formattedTime;\n//   }\n\n//   return (\n//     <div className=\"audio-list\">\n//       <ul>\n//         {Array.isArray(localAudioFiles) &&\n//           localAudioFiles.map((audioFile, index) => (\n//             <li key={audioFile.id}>\n//               <div className=\"audio-metadata-container\">\n//                 {audioFile.image && (\n//                   <img\n//                     src={`data:image/jpeg;base64,${audioFile.image.data}`}\n//                     alt={audioFile.title}\n//                     loading=\"lazy\"\n//                   />\n//                 )}\n//                 <div className=\"button-container\">\n//                   <button\n//                     className=\"play_pause\"\n//                     onClick={() => handlePlayAudio(audioFile, index)}\n//                   >\n//                     {currentTrackIndex === index && playlistId === id && isPlaying ? \"||\" : \">\"}\n//                   </button>\n//                 </div>\n//                 <div className=\"title-author-container\">\n//                   <span className=\"title\">{audioFile.title}</span>\n//                   <span>{audioFile.author}</span>\n//                 </div>\n//                 <div className=\"duration-container\">\n//                   <span className=\"duration\">\n//                     {formatDuration(audioFile.duration)}\n//                   </span>\n//                 </div>\n//               </div>\n//             </li>\n//           ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default AudioList;\nvar _c;\n$RefreshReg$(_c, \"AudioList\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useAudioContext","jsxDEV","_jsxDEV","AudioList","_s","id","currentTrack","setCurrentTrack","isPlaying","togglePlay","setIsPlaying","currentTrackIndex","setCurrentTrackIndex","audioFiles","audioRef","playlistId","setPlaylistId","localAudioFiles","setLocalAudioFiles","updateAudioFiles","audioId","setAudioId","currentPlaylistId","setCurrentPlaylistId","isLocalPlaying","setIsLocalPlaying","length","handleTogglePlay","current","pause","play","handlePlayAudio","audioFile","index","response","fetch","ok","Error","status","blob","audioData","URL","createObjectURL","Blob","audioUrl","trackName","title","author","imageUrl","image","data","duration","error","console","formatDuration","hours","Math","floor","minutes","seconds","formattedTime","String","padStart","className","children","Array","isArray","map","src","alt","loading","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Файлы/ВятГУ/2 курс/Семестр 4/Web/курсач/audio-service/audio-service-client/src/components/audioList/AudioList.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useAudioContext } from \"../AudioContext\";\r\nimport \"./AudioList.css\";\r\n\r\nconst AudioList = () => {\r\n  const { id } = useParams();\r\n  const {\r\n    currentTrack,\r\n    setCurrentTrack,\r\n    isPlaying,\r\n    togglePlay,\r\n    setIsPlaying,\r\n    currentTrackIndex,\r\n    setCurrentTrackIndex,\r\n    audioFiles,\r\n    audioRef,\r\n    playlistId,\r\n    setPlaylistId,\r\n    localAudioFiles,\r\n    setLocalAudioFiles,\r\n    updateAudioFiles,\r\n    audioId,\r\n    setAudioId,\r\n    currentPlaylistId,\r\n    setCurrentPlaylistId,\r\n  } = useAudioContext();\r\n\r\n  const [isLocalPlaying, setIsLocalPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setPlaylistId(id);\r\n    setCurrentPlaylistId(id); // Обновляем текущий плейлист в контексте\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    // Обновляем локальные аудиофайлы, только если они еще не установлены или плейлист изменился\r\n    if (!localAudioFiles.length || currentPlaylistId !== id) {\r\n      setLocalAudioFiles(audioFiles);\r\n    }\r\n  }, [audioFiles, currentPlaylistId, id, setLocalAudioFiles, localAudioFiles]);\r\n\r\n  const handleTogglePlay = () => {\r\n    if (isLocalPlaying) {\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.play();\r\n    }\r\n    setIsLocalPlaying(!isLocalPlaying);\r\n    togglePlay();\r\n  };\r\n\r\n  const handlePlayAudio = async (audioFile, index) => {\r\n    if (\r\n      currentTrackIndex === index &&\r\n      currentPlaylistId === id &&\r\n      audioId === audioFile.id\r\n    ) {\r\n      handleTogglePlay();\r\n    } else {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:8080/api/audio/${audioFile.id}`\r\n        );\r\n        setAudioId(audioFile.id);\r\n\r\n        if (id !== currentPlaylistId) {\r\n          setCurrentPlaylistId(id);\r\n        }\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const blob = await response.blob();\r\n        const audioData = URL.createObjectURL(new Blob([blob]));\r\n\r\n        setCurrentTrackIndex(index);\r\n        setCurrentTrack({\r\n          id: audioFile.id,\r\n          audioUrl: audioData,\r\n          trackName: audioFile.title,\r\n          author: audioFile.author,\r\n          imageUrl: audioFile.image\r\n            ? `data:image/jpeg;base64,${audioFile.image.data}`\r\n            : \"\",\r\n          duration: audioFile.duration,\r\n        });\r\n\r\n        setIsPlaying(true);\r\n      } catch (error) {\r\n        console.error(\"Error fetching audio:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  function formatDuration(duration) {\r\n    const hours = Math.floor(duration / 3600);\r\n    const minutes = Math.floor((duration % 3600) / 60);\r\n    const seconds = Math.floor(duration % 60);\r\n\r\n    let formattedTime = \"\";\r\n    if (hours > 0) {\r\n      formattedTime += hours + \":\";\r\n    }\r\n    if (hours > 0 && minutes < 10) {\r\n      formattedTime += \"0\";\r\n    }\r\n    formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\r\n    formattedTime += String(seconds).padStart(2, \"0\");\r\n\r\n    return formattedTime;\r\n  }\r\n\r\n  return (\r\n    <div className=\"audio-list\">\r\n      <ul>\r\n        {Array.isArray(localAudioFiles) &&\r\n          localAudioFiles.map((audioFile, index) => (\r\n            <li key={audioFile.id}>\r\n              <div className=\"audio-metadata-container\">\r\n                {audioFile.image && (\r\n                  <img\r\n                    src={`data:image/jpeg;base64,${audioFile.image.data}`}\r\n                    alt={audioFile.title}\r\n                    loading=\"lazy\"\r\n                  />\r\n                )}\r\n                <div className=\"button-container\">\r\n                  <button\r\n                    className=\"play_pause\"\r\n                    onClick={() => handlePlayAudio(audioFile, index)}\r\n                  >\r\n                    {currentTrackIndex === index &&\r\n                    currentPlaylistId === id &&\r\n                    isPlaying\r\n                      ? \"||\"\r\n                      : \">\"}\r\n                  </button>\r\n                </div>\r\n                <div className=\"title-author-container\">\r\n                  <span className=\"title\">{audioFile.title}</span>\r\n                  <span>{audioFile.author}</span>\r\n                </div>\r\n                <div className=\"duration-container\">\r\n                  <span className=\"duration\">\r\n                    {formatDuration(audioFile.duration)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioList;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useParams } from \"react-router-dom\"; // Импорт хука useParams\r\n// import { useAudioContext } from \"../AudioContext\";\r\n// import \"./AudioList.css\";\r\n\r\n// const AudioList = () => {\r\n//   const { id } = useParams(); // Получение параметра id из URL\r\n\r\n//   const {\r\n//     setCurrentTrack,\r\n//     isPlaying,\r\n//     togglePlay,\r\n//     setIsPlaying,\r\n//     currentTrackIndex,\r\n//     setCurrentTrackIndex,\r\n//     audioFiles,\r\n//     audioRef,\r\n//     playlistId,\r\n//     setPlaylistId,\r\n//     localAudioFiles,\r\n//     setLocalAudioFiles,\r\n//     updateAudioFiles,\r\n//     updatePlaylist\r\n//   } = useAudioContext();\r\n\r\n//   const [isLocalPlaying, setIsLocalPlaying] = useState(false); // Дополнительное состояние для отслеживания локального воспроизведения\r\n\r\n//   useEffect(() => {\r\n//     setPlaylistId(id);\r\n//     if (id && typeof id === \"string\" && playlistId !== id) {\r\n//       fetch(`http://localhost:8080/api/playlists/${id}`, { method: \"GET\" })\r\n//         .then((response) => response.json())\r\n//         .then((data) => {\r\n//           if (!isPlaying) {\r\n//             updateAudioFiles(data);\r\n//           }\r\n//           updatePlaylist(data);\r\n//         })\r\n//         .catch((error) => console.error(\"Error fetching data:\", error));\r\n//     }\r\n//   }, [id]);\r\n\r\n//   useEffect(() => {\r\n//     setIsLocalPlaying(isPlaying);\r\n//   }, [isPlaying]);\r\n\r\n//   const handleTogglePlay = () => {\r\n//     if (isLocalPlaying) {\r\n//       audioRef.current.pause(); // Пауза воспроизведения\r\n//     } else {\r\n//       audioRef.current.play(); // Возобновление воспроизведения\r\n//     }\r\n//     setIsLocalPlaying(!isLocalPlaying); // Изменение локального состояния воспроизведения\r\n//     togglePlay(); // Переключение состояния воспроизведения в контексте\r\n//   };\r\n\r\n//   const handlePlayAudio = async (audioFile, index) => {\r\n//     if (currentTrackIndex === index && playlistId === id) {\r\n//       handleTogglePlay();\r\n//     } else {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:8080/api/audio/${audioFile.id}`\r\n//         );\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! status: ${response.status}`);\r\n//         }\r\n//         const blob = await response.blob();\r\n//         const audioData = URL.createObjectURL(new Blob([blob]));\r\n\r\n//         setCurrentTrackIndex(index);\r\n//         setCurrentTrack({\r\n//           id: audioFile.id,\r\n//           audioUrl: audioData,\r\n//           trackName: audioFile.title,\r\n//           author: audioFile.author,\r\n//           imageUrl: audioFile.image\r\n//             ? `data:image/jpeg;base64,${audioFile.image.data}`\r\n//             : \"\",\r\n//           duration: audioFile.duration,\r\n//         });\r\n//         setIsPlaying(true);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching audio:\", error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   function formatDuration(duration) {\r\n//     const hours = Math.floor(duration / 3600);\r\n//     const minutes = Math.floor((duration % 3600) / 60);\r\n//     const seconds = Math.floor(duration % 60);\r\n\r\n//     let formattedTime = \"\";\r\n//     if (hours > 0) {\r\n//       formattedTime += hours + \":\";\r\n//     }\r\n//     if (hours > 0 && minutes < 10) {\r\n//       formattedTime += \"0\";\r\n//     }\r\n//     formattedTime += String(minutes).padStart(hours > 0 ? 2 : 1, \"0\") + \":\";\r\n//     formattedTime += String(seconds).padStart(2, \"0\");\r\n\r\n//     return formattedTime;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"audio-list\">\r\n//       <ul>\r\n//         {Array.isArray(localAudioFiles) &&\r\n//           localAudioFiles.map((audioFile, index) => (\r\n//             <li key={audioFile.id}>\r\n//               <div className=\"audio-metadata-container\">\r\n//                 {audioFile.image && (\r\n//                   <img\r\n//                     src={`data:image/jpeg;base64,${audioFile.image.data}`}\r\n//                     alt={audioFile.title}\r\n//                     loading=\"lazy\"\r\n//                   />\r\n//                 )}\r\n//                 <div className=\"button-container\">\r\n//                   <button\r\n//                     className=\"play_pause\"\r\n//                     onClick={() => handlePlayAudio(audioFile, index)}\r\n//                   >\r\n//                     {currentTrackIndex === index && playlistId === id && isPlaying ? \"||\" : \">\"}\r\n//                   </button>\r\n//                 </div>\r\n//                 <div className=\"title-author-container\">\r\n//                   <span className=\"title\">{audioFile.title}</span>\r\n//                   <span>{audioFile.author}</span>\r\n//                 </div>\r\n//                 <div className=\"duration-container\">\r\n//                   <span className=\"duration\">\r\n//                     {formatDuration(audioFile.duration)}\r\n//                   </span>\r\n//                 </div>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AudioList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}